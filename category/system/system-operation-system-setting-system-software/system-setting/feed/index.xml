<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>System Setting (系统设置) &#8211; Eternal Center</title>
	<atom:link href="https://eternalcenter-2021-12.github.io/category/system/system-operation-system-setting-system-software/system-setting/feed/" rel="self" type="application/rss+xml" />
	<link>https://eternalcenter-2021-12.github.io/</link>
	<description></description>
	<lastBuildDate>Sun, 26 Dec 2021 08:56:06 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	
	<item>
		<title>[命令] Linux 命令  set （设置 Shell 里的位置变量或者 Shell 的执行方式）</title>
		<link>https://eternalcenter-2021-12.github.io/set/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Wed, 10 Nov 2021 13:05:41 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[Languages (语言)]]></category>
		<category><![CDATA[Shell]]></category>
		<category><![CDATA[Shell Basic (基础)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Setting (系统设置)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2021-12.github.io/?p=18278</guid>

					<description><![CDATA[内容一：set 命令的格式1.1 设置 Shell 的位置变量的格式 1.2 设置 Shell 的执行方式 或者： 或者： （补充：+o 代表打开特殊属性，-o 代表结束特殊属性） 内容二： set 的常用参数 1) -a 将已修改的变量进行标记，为将其输出至环境变量做准备2) -b 让被中止的后台进程立刻显示退出状态代码3) -d 取消使用杂凑表记忆中使用过的指令4) -e 若退出状态代码不为 0 （正常退出）则立即退出，并显示错误原因5) -f 取消通配符6) -h 默认自动记录函数位置7) -k 让命令的参数为此命令的环境变量8) -l 默认自动记录 for 循环变量名9) -m 监视模式10) -n 测试模式（只读取不执行）11) -p 优先顺序模式12) -P 让文件或目录代替符号链接13) -t 让随后的命令执行后立即退出14) -u 使用未定义的变量时显示错误信息15) -v 显示输入值16) -H shell 使用感叹号 &#8230; <p class="link-more"><a href="https://eternalcenter-2021-12.github.io/set/" class="more-link">Continue reading<span class="screen-reader-text"> "[命令] Linux 命令  set （设置 Shell 里的位置变量或者 Shell 的执行方式）"</span></a></p>]]></description>
										<content:encoded><![CDATA[
<h4>内容一：set 命令的格式<br>1.1 设置 Shell 的位置变量的格式</h4>



<pre class="wp-block-code"><code># set &lt;Value of the first position variable&gt; &lt;Value of the second location variable&gt; ......</code></pre>



<h4>1.2 设置 Shell 的执行方式</h4>



<pre class="wp-block-code"><code># set &lt;parameter&gt;</code></pre>



<p>或者：</p>



<pre class="wp-block-code"><code># set &lt;parameter&gt; +o</code></pre>



<p>或者：</p>



<pre class="wp-block-code"><code># set &lt;parameter&gt; -o</code></pre>



<p>（补充：+o 代表打开特殊属性，-o 代表结束特殊属性）</p>



<h4>内容二： set 的常用参数</h4>



<p>1) -a 将已修改的变量进行标记，为将其输出至环境变量做准备<br>2) -b 让被中止的后台进程立刻显示退出状态代码<br>3) -d 取消使用杂凑表记忆中使用过的指令<br>4) -e 若退出状态代码不为 0 （正常退出）则立即退出，并显示错误原因<br>5) -f 取消通配符<br>6) -h 默认自动记录函数位置<br>7) -k 让命令的参数为此命令的环境变量<br>8) -l 默认自动记录 for 循环变量名<br>9) -m 监视模式<br>10) -n 测试模式（只读取不执行）<br>11) -p 优先顺序模式<br>12) -P 让文件或目录代替符号链接<br>13) -t 让随后的命令执行后立即退出<br>14) -u 使用未定义的变量时显示错误信息<br>15) -v 显示输入值<br>16) -H shell 使用感叹号 “!” + 号码的方式调用 history 命令中的历史命令<br>17) -x 命令指向前先显示此命令的参数或变量</p>



<p>（补充：将以上参数前面的 &#8211; 换成 + 则会变成相反的效果）</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[步骤] Linux rm 命令的监控</title>
		<link>https://eternalcenter-2021-12.github.io/rm-monitor/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Sun, 07 Nov 2021 13:29:10 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System File (系统文件)]]></category>
		<category><![CDATA[System File Security (系统文件安全)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Security (系统安全)]]></category>
		<category><![CDATA[System Setting (系统设置)]]></category>
		<category><![CDATA[System Storage & System Directory & System File (系统存储 & 系统目录 & 系统文件)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2021-12.github.io/?p=18208</guid>

					<description><![CDATA[步骤一：将原来的 rm 命令进行备份 步骤二：创建一个记录 rm 命令使用的脚本 步骤三：给记录 rm 命令使用的脚本执行权限 步骤四：下次使用 rm 命令后就可以监控 /var/log/rm_command.log 日志了 （步骤略）]]></description>
										<content:encoded><![CDATA[
<h4>步骤一：将原来的 rm 命令进行备份</h4>



<pre class="wp-block-code"><code># cp /usr/bin/rm  /usr/bin/rm.original</code></pre>



<h4>步骤二：创建一个记录 rm 命令使用的脚本</h4>



<pre class="wp-block-code"><code># cat /usr/bin/rm
#!/bin/bash
log=/var/log/rm_command.log
echo "The $$ is calling rm command" &gt;&gt; $log
echo "The full command is $*" &gt;&gt; $log
echo
echo "now use this command to get more information: /bin/ps axwwo user,pid,ppid,%cpu,%mem,vsz,rss,stat,time,cmd" &gt;&gt;$log
/bin/ps axwwo user,pid,ppid,%cpu,%mem,vsz,rss,stat,time,cmd &gt;&gt;$log
/usr/bin/rm.original $*
echo "============================================================" &gt;&gt;$log</code></pre>



<h4>步骤三：给记录 rm 命令使用的脚本执行权限</h4>



<pre class="wp-block-code"><code># chmod 755 /usr/bin/rm.original</code></pre>



<h4>步骤四：下次使用 rm 命令后就可以监控 /var/log/rm_command.log 日志了</h4>



<p>（步骤略）</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[步骤] openSUSE&#038;SUSE 通过 zypper 升级内核保留旧内核数量的设置</title>
		<link>https://eternalcenter-2021-12.github.io/opensusesuse-zypper-kernel-reserve/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Mon, 27 Sep 2021 14:06:47 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Computer & System Hardware & System Installation & System Upgradation (系统电脑 & 系统硬件 & 系统安装 & 系统升级)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Patch (系统补丁)]]></category>
		<category><![CDATA[System Security (系统安全)]]></category>
		<category><![CDATA[System Setting (系统设置)]]></category>
		<category><![CDATA[System Upgradation (系统升级)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2021-12.github.io/?p=17666</guid>

					<description><![CDATA[将以下内容： 修改为： （补充：这里以使用 zypper 升级内核时保留 3 个 旧内核为例）]]></description>
										<content:encoded><![CDATA[
<pre class="wp-block-code"><code># vim /etc/zypp/zypp.conf</code></pre>



<p>将以下内容：</p>



<pre class="wp-block-code"><code>......
multiversion.kernels = latest,latest-1,running
......</code></pre>



<p>修改为：</p>



<pre class="wp-block-code"><code>......
multiversion.kernels = latest,latest-3,running
......</code></pre>



<p>（补充：这里以使用 zypper 升级内核时保留 3 个 旧内核为例）</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[步骤] Linux 全局加密 SSL 的设置 （CentOS 8 &#038; RHEL 8 版）</title>
		<link>https://eternalcenter-2021-12.github.io/global-ssl-centos8rhel8/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Sat, 31 Jul 2021 10:11:21 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Network (系统网络)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Patch (系统补丁)]]></category>
		<category><![CDATA[System Security (系统安全)]]></category>
		<category><![CDATA[System Setting (系统设置)]]></category>
		<category><![CDATA[System Software (系统软件)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2021-12.github.io/?p=17184</guid>

					<description><![CDATA[步骤一：查看当前 SSL 全局加密 SSL 的状况 （补充：这里的 DEFAULT 表示可以使用 2048 位及以上位数的 SSL） 步骤二：切换当前 SSL 全局加密 SSL （补充：1) 这里以将全局加密 SSL 切换到 FUTURE 状态为例2) 此时只能使用 4096 位及以上位数的 SSL）]]></description>
										<content:encoded><![CDATA[
<h4>步骤一：查看当前 SSL 全局加密 SSL 的状况</h4>



<pre class="wp-block-code"><code># update-crypto-policies --show
DEFAULT</code></pre>



<p>（补充：这里的 DEFAULT 表示可以使用 2048 位及以上位数的 SSL）</p>



<h4>步骤二：切换当前 SSL 全局加密 SSL</h4>



<pre class="wp-block-code"><code># update-crypto-policies --set FUTURE</code></pre>



<p>（<br>补充：<br>1) 这里以将全局加密 SSL 切换到 FUTURE 状态为例<br>2) 此时只能使用 4096 位及以上位数的 SSL<br>）</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[步骤] Linux ssh 登陆提示信息的修改</title>
		<link>https://eternalcenter-2021-12.github.io/banner-ssh/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Tue, 11 May 2021 09:17:51 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Login Security (系统登录安全)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Security (系统安全)]]></category>
		<category><![CDATA[System Setting (系统设置)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2021-12.github.io/?p=14227</guid>

					<description><![CDATA[步骤一：修改 sshd 的配置 将以下内容： 修改为： 或者： （补充：这里以将 ssh 登陆提示信息修改为 eternalcenter 为例） 步骤二：重启 sshd 服务]]></description>
										<content:encoded><![CDATA[
<h4>步骤一：修改 sshd 的配置</h4>



<pre class="wp-block-code"><code># vim /etc/ssh/sshd_config</code></pre>



<p>将以下内容：</p>



<pre class="wp-block-code"><code>#Banner none</code></pre>



<p>修改为：</p>



<pre class="wp-block-code"><code>Banner eternalcenter</code></pre>



<p>或者：</p>



<pre class="wp-block-code"><code># sed -i 's/.*Banner.*/Banner eternalcenter/' /etc/ssh/sshd_config</code></pre>



<p>（补充：这里以将 ssh 登陆提示信息修改为 eternalcenter 为例）</p>



<h4>步骤二：重启 sshd 服务</h4>



<pre class="wp-block-code"><code># systemctl restart sshd</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[内容] Linux 本地登陆提示信息的修改 （openSUSE&#038;SUSE 版）</title>
		<link>https://eternalcenter-2021-12.github.io/banner-local/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Tue, 11 May 2021 03:26:28 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Login Security (系统登录安全)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Security (系统安全)]]></category>
		<category><![CDATA[System Setting (系统设置)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2021-12.github.io/?p=14223</guid>

					<description><![CDATA[内容目录： 内容一：openSUSE 15.0、openSUSE 15.1、openSUSE 15.2 和 SUSE 12.X 修改本地登陆提示信息 内容二：openSUSE 15.3 及以上版本修改本地登陆提示信息2.1 修改本地登陆系统方面的提示信息2.2 去除本地登陆网卡方面的提示信息2.2.1 去除现有的网卡提示信息2.2.2 设置不再新生成网卡提示信息2.2.3 追加本地登陆提示信息 内容三：SUSE 15.X 修改本地登陆提示信息3.1 修改本地登陆系统方面的提示信息3.2 去除本地登陆网卡方面的提示信息3.2.1 去除现有的网卡提示信息3.2.2 设置不再新生成网卡提示信息3.2.3 设置不再新生成网卡提示信息 具体的内容： 内容一：openSUSE 15.0、openSUSE 15.1、openSUSE 15.2 和 SUSE 12.X 修改本地登陆提示信息 （补充：这里以将本地登陆提示信息修改为 eternalcenter.com 为例） 内容二：openSUSE 15.3 及以上版本修改本地登陆提示信息2.1 修改本地登陆系统方面的提示信息 2.2 去除本地登陆网卡方面的提示信息2.2.1 去除现有的网卡提示信息 2.2.2 设置不再新生成网卡提示信息 将以下内容： 修改为： 或者： （补充：1) 这里以将本地登陆提示信息修改为 eternalcenter.com 为例2) 将 NETWORK_INTERFACE_REGEX=&#8221;^[be]&#8221; &#8230; <p class="link-more"><a href="https://eternalcenter-2021-12.github.io/banner-local/" class="more-link">Continue reading<span class="screen-reader-text"> "[内容] Linux 本地登陆提示信息的修改 （openSUSE&#038;SUSE 版）"</span></a></p>]]></description>
										<content:encoded><![CDATA[
<h2>内容目录：</h2>



<h4>内容一：openSUSE 15.0、openSUSE 15.1、openSUSE 15.2 和 SUSE 12.X 修改本地登陆提示信息</h4>



<h4>内容二：openSUSE 15.3 及以上版本修改本地登陆提示信息<br>2.1 修改本地登陆系统方面的提示信息<br>2.2 去除本地登陆网卡方面的提示信息<br>2.2.1 去除现有的网卡提示信息<br>2.2.2 设置不再新生成网卡提示信息<br>2.2.3 追加本地登陆提示信息</h4>



<h4>内容三：SUSE 15.X 修改本地登陆提示信息<br>3.1 修改本地登陆系统方面的提示信息<br>3.2 去除本地登陆网卡方面的提示信息<br>3.2.1 去除现有的网卡提示信息<br>3.2.2 设置不再新生成网卡提示信息<br>3.2.3 设置不再新生成网卡提示信息</h4>



<h2>具体的内容：</h2>



<h4>内容一：openSUSE 15.0、openSUSE 15.1、openSUSE 15.2 和 SUSE 12.X 修改本地登陆提示信息</h4>



<pre class="wp-block-code"><code># echo 'eternalcenter.com' &gt; /etc/issue
# echo 'eternalcenter.com' &gt; /etc/issue.net</code></pre>



<p>（补充：这里以将本地登陆提示信息修改为 eternalcenter.com 为例）</p>



<h4>内容二：openSUSE 15.3 及以上版本修改本地登陆提示信息<br>2.1 修改本地登陆系统方面的提示信息</h4>



<pre class="wp-block-code"><code># echo 'eternalcenter' &gt; /usr/lib/issue.d/10-openSUSE.conf</code></pre>



<h4>2.2 去除本地登陆网卡方面的提示信息<br>2.2.1 去除现有的网卡提示信息</h4>



<pre class="wp-block-code"><code># issue-generator network remove eth0</code></pre>



<h4>2.2.2 设置不再新生成网卡提示信息</h4>



<pre class="wp-block-code"><code># vim /etc/sysconfig/issue-generator</code></pre>



<p>将以下内容：</p>



<pre class="wp-block-code"><code>......
NETWORK_INTERFACE_REGEX="^&#91;be]"
......</code></pre>



<p>修改为：</p>



<pre class="wp-block-code"><code>......
NETWORK_INTERFACE_REGEX="^&#91;b]"
......</code></pre>



<p>或者：</p>



<pre class="wp-block-code"><code># sed -i 's/NETWORK_INTERFACE_REGEX="^\&#91;be\]"/NETWORK_INTERFACE_REGEX="^\&#91;b\]"/' /etc/sysconfig/issue-generator</code></pre>



<p>（<br>补充：<br>1) 这里以将本地登陆提示信息修改为 eternalcenter.com 为例<br>2) 将 NETWORK_INTERFACE_REGEX=&#8221;^[be]&#8221; 修改为 NETWORK_INTERFACE_REGEX=&#8221;^[b]&#8221; 是不再显示网卡信息<br>）</p>



<h4>2.2.3 追加本地登陆提示信息</h4>



<pre class="wp-block-code"><code># echo 'Welcome' /etc/issue.d/issue</code></pre>



<p>（<br>补充：<br>1) 这里以添加 Welcome 本地登陆提示信息为例<br>2) 结合上文的案例，这里将同时显示 eternalcenter.com 和 Welcome<br>）</p>



<h4>内容三：SUSE 15.X 修改本地登陆提示信息<br>3.1 修改本地登陆系统方面的提示信息</h4>



<pre class="wp-block-code"><code># echo 'eternalcenter' &gt; /usr/lib/issue.d/10-SUSE</code></pre>



<h4>3.2 去除本地登陆网卡方面的提示信息<br>3.2.1 去除现有的网卡提示信息</h4>



<pre class="wp-block-code"><code># issue-generator network remove eth0</code></pre>



<h4>3.2.2 设置不再新生成网卡提示信息</h4>



<pre class="wp-block-code"><code># vim /etc/sysconfig/issue-generator</code></pre>



<p>将以下内容：</p>



<pre class="wp-block-code"><code>......
NETWORK_INTERFACE_REGEX="^&#91;be]"
......</code></pre>



<p>修改为：</p>



<pre class="wp-block-code"><code>......
NETWORK_INTERFACE_REGEX="^&#91;b]"
......</code></pre>



<p>或者：</p>



<pre class="wp-block-code"><code># sed -i 's/NETWORK_INTERFACE_REGEX="^\&#91;be\]"/NETWORK_INTERFACE_REGEX="^\&#91;b\]"/' /etc/sysconfig/issue-generator</code></pre>



<p>（<br>补充：<br>1) 这里以将本地登陆提示信息修改为 eternalcenter.com 为例<br>2) 将 NETWORK_INTERFACE_REGEX=”^[be]” 修改为 NETWORK_INTERFACE_REGEX=”^[b]” 是不再显示网卡信息<br>）</p>



<h4>3.2.3 追加本地登陆提示信息</h4>



<pre class="wp-block-code"><code># echo 'Welcome' /etc/issue.d/issue</code></pre>



<p>（<br>补充：<br>1) 这里以添加 Welcome 本地登陆提示信息为例<br>2) 结合上文的案例，这里将同时显示 eternalcenter.com 和 Welcome<br>）</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[步骤] Linux 切换用户时图形变量的保持</title>
		<link>https://eternalcenter-2021-12.github.io/maintenance-of-graphic-variables/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Thu, 08 Apr 2021 08:32:27 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Setting (系统设置)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2021-12.github.io/?p=14014</guid>

					<description><![CDATA[步骤一：显示当前用户的图形变量 （补充：这里的图形变量参数是 localhost:10.0） 步骤二：切换到其他用户 （补充：这里以切换到 root 用户为例） 步骤三：使用上一个用户的图形变量 （补充：这里以将图像变量设置为刚才看到的 localhost:10.0 为例） 步骤四：使用图形程序 （补充：这里以使用 xclock 图形程序为例）]]></description>
										<content:encoded><![CDATA[
<h4>步骤一：显示当前用户的图形变量</h4>



<pre class="wp-block-code"><code>$ echo $DISPLAY
localhost:10.0</code></pre>



<p>（补充：这里的图形变量参数是 localhost:10.0）</p>



<h4>步骤二：切换到其他用户</h4>



<pre class="wp-block-code"><code>$ su - root</code></pre>



<p>（补充：这里以切换到 root 用户为例）</p>



<h4>步骤三：使用上一个用户的图形变量</h4>



<pre class="wp-block-code"><code># export DISPLAY=localhost:10.0</code></pre>



<p>（补充：这里以将图像变量设置为刚才看到的 localhost:10.0 为例）</p>



<h4>步骤四：使用图形程序</h4>



<pre class="wp-block-code"><code># xclock</code></pre>



<p>（补充：这里以使用 xclock 图形程序为例）</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[步骤] Linux ssh 输错密码次数限制的设置 （openSUSE&#038;SUSE 版）</title>
		<link>https://eternalcenter-2021-12.github.io/ssh-attempt-opensuse/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Sat, 20 Mar 2021 11:54:51 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Login Security (系统登录安全)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Security (系统安全)]]></category>
		<category><![CDATA[System Setting (系统设置)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2021-12.github.io/?p=13618</guid>

					<description><![CDATA[步骤一：配置 /etc/pam.d/sshd 文件 （补充：1) 这里的 pam_tally2.so 代表使用 pam_tally2.so 模块2) 这里的 deny=15 代表输错 15 次后会禁止登陆3) 这里的 unlock_time=3000 代表禁止登陆后 3000 毫秒后可以重新登陆） 步骤二：配置 /etc/pam.d/sshd 文件 （补充：这里的 pam_tally2.so 代表加载 pam_tally2.so 模块）]]></description>
										<content:encoded><![CDATA[
<h4>步骤一：配置 /etc/pam.d/sshd 文件</h4>



<pre class="wp-block-code"><code># sed -i '/auth.*include.*common-auth/a auth        required    pam_tally2.so onerr=fail audit silent deny=15 unlock_time=3000' /etc/pam.d/sshd</code></pre>



<p>（<br>补充：<br>1) 这里的 pam_tally2.so 代表使用 pam_tally2.so 模块<br>2) 这里的 deny=15 代表输错 15 次后会禁止登陆<br>3) 这里的 unlock_time=3000 代表禁止登陆后 3000 毫秒后可以重新登陆<br>）</p>



<h4>步骤二：配置 /etc/pam.d/sshd 文件</h4>



<pre class="wp-block-code"><code># sed -i '/account.*include.*common-account/a account     required    pam_tally2.so' /etc/pam.d/sshd</code></pre>



<p>（补充：这里的 pam_tally2.so 代表加载 pam_tally2.so 模块）</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[步骤] GRUB2 Bootloader 密码的设置 （CentOS&#038;RHEL 版）</title>
		<link>https://eternalcenter-2021-12.github.io/grub2-bootloader-centosrhel/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Fri, 05 Mar 2021 07:43:06 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Login Security (系统登录安全)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Security (系统安全)]]></category>
		<category><![CDATA[System Setting (系统设置)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2021-12.github.io/?p=13602</guid>

					<description><![CDATA[步骤一：生成密码的 GRUB2 密码的 SHA512 值 （补充：这里以生成 eternalcenter 的 GRUB2 SHA512 值为例） （注意：grub.pbkdf2.sha512.10000……. 后面的一长串字母和数字其实是一行，这里因为是显示问题所以看上去是多行） 步骤二：创建 GRUB2 密码文件2.1 给 EFI 的 CentOS&#38;RHEL 创建 GRUB2 密码文件 （补充：1) 登录用户 root2) 登陆密码 eternalcenter3) 这里的 grub.pbkdf2.sha512.10000.B857B…… 是由步骤一生成的） （注意：这里其实只有一行，因为是显示问题所以看上去是多行） 2.2 给 BIOS 的 CentOS&#38;RHEL 创建 GRUB2 密码文件 （补充：1) 登录用户 root2) 登陆密码 eternalcenter3) 这里的 grub.pbkdf2.sha512.10000.B857B…… 是由步骤一生成的） （注意：这里其实只有一行，因为是显示问题所以看上去是多行） 步骤三：测试 GRUB2 Bootloader 密码3.1 重启系统 （步骤略） &#8230; <p class="link-more"><a href="https://eternalcenter-2021-12.github.io/grub2-bootloader-centosrhel/" class="more-link">Continue reading<span class="screen-reader-text"> "[步骤] GRUB2 Bootloader 密码的设置 （CentOS&#038;RHEL 版）"</span></a></p>]]></description>
										<content:encoded><![CDATA[
<h4>步骤一：生成密码的 GRUB2 密码的 SHA512 值</h4>



<pre class="wp-block-code"><code># grub2-mkpasswd-pbkdf2
Enter password: 
Reenter password: 
PBKDF2 hash of your password is 
grub.pbkdf2.sha512.10000.
B857B79D02FF55CA3A69B8485C1A4A427424630C804CC8A89134520A34E056D7882A778F6BC8AD856CB95DF8B99BE25F9FEAD899D826BB3915FB20BAD682D10A.4A1CF49B7F815A0578031CCA2CE98C66BDFBEAB0AE2721531BB54AFC6CFFA990FBD9062F41C006376C283B717FEC1BD9BB1AFB882AF91B5F4A812459D7974D1F</code></pre>



<p>（补充：这里以生成 eternalcenter 的 GRUB2 SHA512 值为例）</p>



<p>（注意：grub.pbkdf2.sha512.10000……. 后面的一长串字母和数字其实是一行，这里因为是显示问题所以看上去是多行）</p>



<h4>步骤二：创建 GRUB2 密码文件<br>2.1 给 EFI 的 CentOS&amp;RHEL 创建 GRUB2 密码文件</h4>



<pre class="wp-block-code"><code>echo "GRUB2_PASSWORD=grub.pbkdf2.sha512.10000.B857B79D02FF55CA3A69B8485C1A4A427424630C804CC8A89134520A34E056D7882A778F6BC8AD856CB95DF8B99BE25F9FEAD899D826BB3915FB20BAD682D10A.4A1CF49B7F815A0578031CCA2CE98C66BDFBEAB0AE2721531BB54AFC6CFFA990FBD9062F41C006376C283B717FEC1BD9BB1AFB882AF91B5F4A812459D7974D1F" &gt; /boot/efi/EFI/redhat/user.cfg</code></pre>



<p>（<br>补充：<br>1) 登录用户 root<br>2) 登陆密码 eternalcenter<br>3) 这里的 grub.pbkdf2.sha512.10000.B857B…… 是由步骤一生成的<br>）</p>



<p>（注意：这里其实只有一行，因为是显示问题所以看上去是多行）</p>



<h4>2.2 给 BIOS 的 CentOS&amp;RHEL 创建 GRUB2 密码文件</h4>



<pre class="wp-block-code"><code>echo "GRUB2_PASSWORD=grub.pbkdf2.sha512.10000.B857B79D02FF55CA3A69B8485C1A4A427424630C804CC8A89134520A34E056D7882A778F6BC8AD856CB95DF8B99BE25F9FEAD899D826BB3915FB20BAD682D10A.4A1CF49B7F815A0578031CCA2CE98C66BDFBEAB0AE2721531BB54AFC6CFFA990FBD9062F41C006376C283B717FEC1BD9BB1AFB882AF91B5F4A812459D7974D1F" &gt; /boot/grub2/user.cfg</code></pre>



<p>（<br>补充：<br>1) 登录用户 root<br>2) 登陆密码 eternalcenter<br>3) 这里的 grub.pbkdf2.sha512.10000.B857B…… 是由步骤一生成的<br>）</p>



<p>（注意：这里其实只有一行，因为是显示问题所以看上去是多行）</p>



<h4>步骤三：测试 GRUB2 Bootloader 密码<br>3.1 重启系统</h4>



<p>（步骤略）</p>



<h4>3.2 进入到 GRUB2 Bootloader 模式</h4>



<p>当启动系统时按下 “E”：</p>



<h4>补充：更改 GRUB2 的登陆用户<br>补充一：给 EFI 的 CentOS&amp;RHEL 更改 GRUB2 的登陆用户</h4>



<pre class="wp-block-code"><code># echo &lt;user&gt; &gt; /boot/efi/EFI/redhat/user.cfg</code></pre>



<h4>补充二：给 BIOS 的 CentOS&amp;RHEL 更改 GRUB2 的登陆用户</h4>



<pre class="wp-block-code"><code># echo &lt;user&gt; &gt; /boot/grub2/user.cfg</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[工具] Shell 自动化部署 GRUB2 Bootloader 密码 （CentOS&#038;RHEL 版）</title>
		<link>https://eternalcenter-2021-12.github.io/shell-grub2-bootloader-centosrhel/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Thu, 04 Mar 2021 08:53:25 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[Languages (语言)]]></category>
		<category><![CDATA[Shell]]></category>
		<category><![CDATA[Shell Deployment (部署)]]></category>
		<category><![CDATA[Shell Others (其他)]]></category>
		<category><![CDATA[Shell Tool (工具)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Login Security (系统登录安全)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Security (系统安全)]]></category>
		<category><![CDATA[System Setting (系统设置)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2021-12.github.io/?p=13593</guid>

					<description><![CDATA[介绍： 作者：朱明宇名称：自动化部署 GRUB2 Bootloader 密码（CentOS&#38;RHEL 版）作用：自动化部署 GRUB2 Bootloader 密码（CentOS&#38;RHEL 版） 使用方法：1. 给此脚本添加执行权限2. 执行此脚本3. 当启动系统时，左下角出现以下内容时按下 “E”： 注意：1. 登陆的账号是 root2. 登陆的密码是 eternalcenter 脚本：]]></description>
										<content:encoded><![CDATA[
<h2>介绍：</h2>



<p>作者：朱明宇<br>名称：自动化部署 GRUB2 Bootloader 密码（CentOS&amp;RHEL 版）<br>作用：自动化部署 GRUB2 Bootloader 密码（CentOS&amp;RHEL 版）</p>



<p>使用方法：<br>1. 给此脚本添加执行权限<br>2. 执行此脚本<br>3. 当启动系统时，左下角出现以下内容时按下 “E”：</p>



<p>注意：<br>1. 登陆的账号是 root<br>2. 登陆的密码是 eternalcenter</p>



<h2>脚本：</h2>



<pre class="wp-block-code"><code>#!/bin/bash

if &#91; -d /sys/firmware/efi ]; then
        echo "GRUB2_PASSWORD=grub.pbkdf2.sha512.10000.B857B79D02FF55CA3A69B8485C1A4A427424630C804CC8A89134520A34E056D7882A778F6BC8AD856CB95DF8B99BE25F9FEAD899D826BB3915FB20BAD682D10A.4A1CF49B7F815A0578031CCA2CE98C66BDFBEAB0AE2721531BB54AFC6CFFA990FBD9062F41C006376C283B717FEC1BD9BB1AFB882AF91B5F4A812459D7974D1F" > /boot/efi/EFI/redhat/user.cfg
else
        echo "GRUB2_PASSWORD=grub.pbkdf2.sha512.10000.B857B79D02FF55CA3A69B8485C1A4A427424630C804CC8A89134520A34E056D7882A778F6BC8AD856CB95DF8B99BE25F9FEAD899D826BB3915FB20BAD682D10A.4A1CF49B7F815A0578031CCA2CE98C66BDFBEAB0AE2721531BB54AFC6CFFA990FBD9062F41C006376C283B717FEC1BD9BB1AFB882AF91B5F4A812459D7974D1F" > /boot/grub2/user.cfg
fi</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[工具] Shell 批量设置官方软件源 （openSUSE  Leap 15.2 版）</title>
		<link>https://eternalcenter-2021-12.github.io/shell-opensuse-official-repo/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Sat, 06 Feb 2021 06:21:52 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[Languages (语言)]]></category>
		<category><![CDATA[Shell]]></category>
		<category><![CDATA[Shell Deployment (部署)]]></category>
		<category><![CDATA[Shell Others (其他)]]></category>
		<category><![CDATA[Shell Tool (工具)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Computer & System Hardware & System Installation & System Upgradation (系统电脑 & 系统硬件 & 系统安装 & 系统升级)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Setting (系统设置)]]></category>
		<category><![CDATA[System Software (系统软件)]]></category>
		<category><![CDATA[System Upgradation (系统升级)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2021-12.github.io/?p=13277</guid>

					<description><![CDATA[介绍： 作者：朱明宇名称：批量设置官方软件源（openSUSE 版）作用：批量设置官方软件源（openSUSE 版） 使用方法：1. 服务器清单 $add_repo_servers_list.txt 每一个服务器名占用一行，并和此脚本放在同一目录下2. 在此脚本的分割线内写入相应的内容3. 给此脚本添加执行权限4. 执行此脚本 脚本分割线里的变量：add_repo_servers_list.txt #指定存放要设置官方软件源的文件 注意：1. 此脚本执行前必须要先保证执行此脚本的用户能无密码 ssh 远程这些远程服务器2. 服务器的系统需要是 openSUSE 15.2 版本3. 服务器系统要配置好可用的软件源（最好是软件数量最多的官方版本）4. 这些远程服务器要能够连接外网 脚本：]]></description>
										<content:encoded><![CDATA[
<h2>介绍：</h2>



<p>作者：朱明宇<br>名称：批量设置官方软件源（openSUSE 版）<br>作用：批量设置官方软件源（openSUSE 版）</p>



<p>使用方法：<br>1. 服务器清单 $add_repo_servers_list.txt 每一个服务器名占用一行，并和此脚本放在同一目录下<br>2. 在此脚本的分割线内写入相应的内容<br>3. 给此脚本添加执行权限<br>4. 执行此脚本</p>



<p>脚本分割线里的变量：<br>add_repo_servers_list.txt #指定存放要设置官方软件源的文件</p>



<p>注意：<br>1. 此脚本执行前必须要先保证执行此脚本的用户能无密码 ssh 远程这些远程服务器<br>2. 服务器的系统需要是 openSUSE 15.2 版本<br>3. 服务器系统要配置好可用的软件源（最好是软件数量最多的官方版本）<br>4. 这些远程服务器要能够连接外网</p>



<h2>脚本：</h2>



<pre class="wp-block-code"><code>#!/bin/bash

####################### Separator ########################

add_repo_servers_list.txt

####################### Separator ########################

cat add_repo_servers_list.txt
read -p "will add opensuse_leap_15.2 repo please input y " a
echo $a

if &#91; "$a" != "y" ];then
        echo "you don't agree so exit now"
        exit
fi

for i in `awk '{print $1}' add_repo_servers_list.txt`
do
        ssh $i '
        sudo -u root su - root -c "zypper mr -da"
        sudo -u root su - root -c "zypper ar -fcg http://download.opensuse.org/distribution/leap/15.2/repo/oss/ OpenSUSE_Leap_152_x64_update-oss"
        sudo -u root su - root -c "zypper ar -fcg http://download.opensuse.org/distribution/leap/15.2/repo/non-oss/ OpenSUSE_Leap_152_x64_update-non-oss"
        sudo -u root su - root -c "zypper ar -fcg http://download.opensuse.org/update/leap/15.2/oss/ OpenSUSE_Leap_152_x64_oss"
        sudo -u root su - root -c "zypper ar -fcg http://download.opensuse.org/update/leap/15.2/non-oss/ OpenSUSE_Leap_152_x64_non-oss"
        sudo -u root su - root -c "zypper ref"
done</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[步骤] GRUB2 Bootloader 密码的设置 （openSUSE&#038;SUSE 版）</title>
		<link>https://eternalcenter-2021-12.github.io/grub2-bootloader-opensusesuse/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Wed, 30 Dec 2020 02:54:51 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Login Security (系统登录安全)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Security (系统安全)]]></category>
		<category><![CDATA[System Setting (系统设置)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2021-12.github.io/?p=13137</guid>

					<description><![CDATA[步骤一：生成密码的 GRUB2 密码的 SHA512 值 （补充：这里以生成 eternalcenter 的 GRUB2 SHA512 值为例） （注意：grub.pbkdf2.sha512.10000&#8230;&#8230;. 后面的一长串字母和数字其实是一行，这里因为是显示问题所以看上去是多行） 步骤二：创建 GRUB2 密码文件 创建以下内容： （补充：1) 登录用户 root2) 登陆密码 eternalcenter3) 这里的 grub.pbkdf2.sha512.10000.B857B&#8230;&#8230; 是由步骤一生成的） （注意：1) password_pbkdf2 root 和 grub.pbkdf2.sha512.10000&#8230;&#8230; 其实是一行，中间只有一个空格，应该写成 password_pbkdf2 root grub.pbkdf2.sha512.10000&#8230;&#8230;，这里因为是显示问题所以看上去是两行2) password_pbkdf2 root grub.pbkdf2.sha512.10000&#8230;&#8230;. 后面的一长串字母和数字其实是一行，从 export superusers 开始才是独立的一行，这里因为是显示问题所以看上去是多行） 步骤三：修改 /etc/default/grub 参数 在这一行里： 添加： 步骤四：让刚刚创建的 GRUB2 密码文件生效 步骤五：测试 GRUB2 Bootloader 密码5.1 重启系统 5.2 &#8230; <p class="link-more"><a href="https://eternalcenter-2021-12.github.io/grub2-bootloader-opensusesuse/" class="more-link">Continue reading<span class="screen-reader-text"> "[步骤] GRUB2 Bootloader 密码的设置 （openSUSE&#038;SUSE 版）"</span></a></p>]]></description>
										<content:encoded><![CDATA[
<h4>步骤一：生成密码的 GRUB2 密码的 SHA512 值</h4>



<pre class="wp-block-code"><code># grub2-mkpasswd-pbkdf2
Enter password: 
Reenter password: 
PBKDF2 hash of your password is 
grub.pbkdf2.sha512.10000.
B857B79D02FF55CA3A69B8485C1A4A427424630C804CC8A89134520A34E056D7882A778F6BC8AD856CB95DF8B99BE25F9FEAD899D826BB3915FB20BAD682D10A.4A1CF49B7F815A0578031CCA2CE98C66BDFBEAB0AE2721531BB54AFC6CFFA990FBD9062F41C006376C283B717FEC1BD9BB1AFB882AF91B5F4A812459D7974D1F</code></pre>



<p>（补充：这里以生成 eternalcenter 的 GRUB2 SHA512 值为例）</p>



<p>（注意：grub.pbkdf2.sha512.10000&#8230;&#8230;. 后面的一长串字母和数字其实是一行，这里因为是显示问题所以看上去是多行）</p>



<h4>步骤二：创建 GRUB2 密码文件</h4>



<pre class="wp-block-code"><code># vim /etc/grub.d/40_custom</code></pre>



<p>创建以下内容：</p>



<pre class="wp-block-code"><code>#!/bin/sh
exec tail -n +3 $0
# This file provides an easy way to add custom menu entries.  Simply type the
# menu entries you want to add after this comment.  Be careful not to change
# the 'exec tail' line above.
set superusers="root"
password_pbkdf2 root grub.pbkdf2.sha512.10000.
B857B79D02FF55CA3A69B8485C1A4A427424630C804CC8A89134520A34E056D7882A778F6BC8AD856CB95DF8B99BE25F9FEAD899D826BB3915FB20BAD682D10A.4A1CF49B7F815A0578031CCA2CE98C66BDFBEAB0AE2721531BB54AFC6CFFA990FBD9062F41C006376C283B717FEC1BD9BB1AFB882AF91B5F4A812459D7974D1F
export superusers
set unrestricted_menu="y"
export unrestricted_menu</code></pre>



<p>（<br>补充：<br>1) 登录用户 root<br>2) 登陆密码 eternalcenter<br>3) 这里的 grub.pbkdf2.sha512.10000.B857B&#8230;&#8230; 是由步骤一生成的<br>）</p>



<p>（<br>注意：<br>1) password_pbkdf2 root 和 grub.pbkdf2.sha512.10000&#8230;&#8230; 其实是一行，中间只有一个空格，应该写成 password_pbkdf2 root grub.pbkdf2.sha512.10000&#8230;&#8230;，这里因为是显示问题所以看上去是两行<br>2) password_pbkdf2 root grub.pbkdf2.sha512.10000&#8230;&#8230;. 后面的一长串字母和数字其实是一行，从 export superusers 开始才是独立的一行，这里因为是显示问题所以看上去是多行<br>）</p>



<h4>步骤三：修改 /etc/default/grub 参数</h4>



<pre class="wp-block-code"><code># vim /etc/default/grub</code></pre>



<p>在这一行里：</p>



<pre class="wp-block-code"><code>GRUB_CMDLINE_LINUX_DEFAULT="......"</code></pre>



<p>添加：</p>



<pre class="wp-block-code"><code>GRUB_CMDLINE_LINUX_DEFAULT="...... rd.shell=0 showopts LANG=C/g"</code></pre>



<h4>步骤四：让刚刚创建的 GRUB2 密码文件生效</h4>



<pre class="wp-block-code"><code># grub2-mkconfig -o /boot/grub2/grub.cfg</code></pre>



<h4>步骤五：测试 GRUB2 Bootloader 密码<br>5.1 重启系统</h4>



<h4>5.2 进入到 GRUB2 Bootloader 模式</h4>



<p>当启动系统时，左下角出现以下内容时按下 “E”：</p>



<pre class="wp-block-code"><code>    C: Command Line    E: Edit Entry</code></pre>



<div style="height:100px" aria-hidden="true" class="wp-block-spacer"></div>



<p>参考文献：</p>



<p class="has-text-align-center">https://www.suse.com/support/kb/doc/?id=000019331</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[内容] Gnome 前台命令的执行</title>
		<link>https://eternalcenter-2021-12.github.io/front/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Sun, 22 Nov 2020 15:49:19 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Operation (系统操作)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Setting (系统设置)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2021-12.github.io/?p=11797</guid>

					<description><![CDATA[内容一：直接执行前台命令1.1 设置显示变量 1.2 执行前台命令 （补充：这里以在前台执行 ls 命令为例） 内容二：周期执行前台命令 添加以下内容： （补充：这里以每分钟在前台执行 ls 命令为例）]]></description>
										<content:encoded><![CDATA[
<h4>内容一：直接执行前台命令<br>1.1 设置显示变量</h4>



<pre class="wp-block-code"><code># export DISPLAY=":0"</code></pre>



<h4>1.2 执行前台命令</h4>



<pre class="wp-block-code"><code># gnome-terminal -x bash -c "ls; exec bash"</code></pre>



<p>（补充：这里以在前台执行 ls 命令为例）</p>



<h4>内容二：周期执行前台命令</h4>



<pre class="wp-block-code"><code># crontab -e</code></pre>



<p>添加以下内容：</p>



<pre class="wp-block-code"><code>......
*/1 * * * * export DISPLAY=":0" &amp;&amp; gnome-terminal -x bash -c "&lt;命令>; exec bash"</code></pre>



<p>（补充：这里以每分钟在前台执行 ls 命令为例）</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[步骤] Linux snmp v1 和 snmp v2 的禁用</title>
		<link>https://eternalcenter-2021-12.github.io/snmp-v1-snmp-v2-disable/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Sat, 14 Nov 2020 13:38:34 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Setting (系统设置)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2021-12.github.io/?p=11785</guid>

					<description><![CDATA[步骤一：修改 snmp 的配置文件 将以下内容： 修改为： 步骤二：让修改的内容生效]]></description>
										<content:encoded><![CDATA[
<h4>步骤一：修改 snmp 的配置文件</h4>



<pre class="wp-block-code"><code># vim /etc/snmp/snmpd.conf</code></pre>



<p>将以下内容：</p>



<pre class="wp-block-code"><code>......
group gpublic v1 upublic
group gpublic v2c upublic
......</code></pre>



<p>修改为：</p>



<pre class="wp-block-code"><code>......
# group gpublic v1 upublic
# group gpublic v2c upublic
......</code></pre>



<h4>步骤二：让修改的内容生效</h4>



<pre class="wp-block-code"><code># systemctl restart snmpd</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[内容] Linux 用户登陆的超时时间的设置</title>
		<link>https://eternalcenter-2021-12.github.io/timeout/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Mon, 09 Nov 2020 15:17:45 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Login Security (系统登录安全)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Security (系统安全)]]></category>
		<category><![CDATA[System Setting (系统设置)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2021-12.github.io/?p=11664</guid>

					<description><![CDATA[内容一：临时设置用户登陆的超时时间 或者： （补充：1) 这里以设置超过 900 秒用户就会超时为例2) 如果 TMOUT=0 则用户永不会超时） 内容二：永久设置用户登陆的超时时间2.1 通过 /etc/profile 文件实现2.1.1 修改 /etc/profile 文件 添加以下内容： （补充：1) 这里以设置超过 900 秒用户就会超时为例2) 如果 TMOUT=0 则用户永不会超时3) 补充 /etc/bashrc 文件会比 /etc/profile 文件更有优先级） 2.1.2 使刚刚的设置生效 2.2 通过 /etc/bashrc 文件实现2.2.1 修改 /etc/bashrc 文件 添加以下内容： （补充：1) 这里以设置超过 900 秒用户就会超时为例2) 如果 TMOUT=0 则用户永不会超时3) 补充 /etc/bashrc 文件会比 /etc/profile 文件更有优先级） 2.2.2 使刚刚的设置生效 内容三：查看现在用户登陆的超时时间 补充： &#8230; <p class="link-more"><a href="https://eternalcenter-2021-12.github.io/timeout/" class="more-link">Continue reading<span class="screen-reader-text"> "[内容] Linux 用户登陆的超时时间的设置"</span></a></p>]]></description>
										<content:encoded><![CDATA[
<h4>内容一：临时设置用户登陆的超时时间</h4>



<pre class="wp-block-code"><code># TMOUT=900</code></pre>



<p>或者：</p>



<pre class="wp-block-code"><code># export TMOUT=0</code></pre>



<p>（<br>补充：<br>1) 这里以设置超过 900 秒用户就会超时为例<br>2) 如果 TMOUT=0 则用户永不会超时<br>）</p>



<h4>内容二：永久设置用户登陆的超时时间<br>2.1 通过 /etc/profile 文件实现<br>2.1.1 修改 /etc/profile 文件</h4>



<pre class="wp-block-code"><code># vim /etc/profile</code></pre>



<p>添加以下内容：</p>



<pre class="wp-block-code"><code>......
TMOUT=900</code></pre>



<p>（<br>补充：<br>1) 这里以设置超过 900 秒用户就会超时为例<br>2) 如果 TMOUT=0 则用户永不会超时<br>3) 补充 /etc/bashrc 文件会比 /etc/profile 文件更有优先级<br>）</p>



<h4>2.1.2 使刚刚的设置生效</h4>



<pre class="wp-block-code"><code># source /etc/profile</code></pre>



<h4>2.2 通过 /etc/bashrc 文件实现<br>2.2.1 修改 /etc/bashrc 文件</h4>



<pre class="wp-block-code"><code># vim /etc/bashrc</code></pre>



<p>添加以下内容：</p>



<pre class="wp-block-code"><code>......
TMOUT=900</code></pre>



<p>（<br>补充：<br>1) 这里以设置超过 900 秒用户就会超时为例<br>2) 如果 TMOUT=0 则用户永不会超时<br>3) 补充 /etc/bashrc 文件会比 /etc/profile 文件更有优先级<br>）</p>



<h4>2.2.2 使刚刚的设置生效</h4>



<pre class="wp-block-code"><code># source /etc/bashrc</code></pre>



<h4>内容三：查看现在用户登陆的超时时间</h4>



<pre class="wp-block-code"><code># echo $TMOUT</code></pre>



<h4>补充：</h4>



<p>当通过以上设置造成用户登陆超时时，系统会输出以下内容：</p>



<pre class="wp-block-code"><code># timed out waiting for input: auto-logout</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[步骤] Linux 周期任务计划的设置</title>
		<link>https://eternalcenter-2021-12.github.io/crontab/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Sat, 24 Oct 2020 14:56:42 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Setting (系统设置)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2021-12.github.io/?p=11624</guid>

					<description><![CDATA[]]></description>
										<content:encoded><![CDATA[
<pre class="wp-block-code"><code>步骤目录：
步骤一：进入周期任务计划的文件
1.1 案例一：直接进入周期任务计划的文件
1.2 案例二：以某一个用户的身份进入周期任务计划的文件

步骤二：设置周期任务计划
2.1 设置周期任务计划的格式
2.2 设置周期任务计划的案例
2.2.1 案例一
2.2.2 案例二
2.2.3 案例三

步骤三：查看已设置的周期任务计划
3.1 案例一：查看本用户已设置的周期任务计划
3.2 案例二：以某一个用户的身份进入周期任务计划的文件

具体的操作步骤：
步骤一：进入周期任务计划的文件
1.1 案例一：直接进入周期任务计划的文件
# crontab -e

1.2 案例二：以某一个用户的身份进入周期任务计划的文件
# crontab -u root -e

（补充：这里以使用 root 用户的身份进入周期任务计划的文件为例）

步骤二：设置周期任务计划
2.1 设置周期任务计划的格式
&lt;第几分钟> &lt;第几小时> &lt;每月的第几天> &lt;每年的第几月> &lt;每周的第几天> &lt;要执行的命令>

（
补充：
1) 当以上内容是一个星号 “*” 时，代表任意时刻都会执行
2) 当在某一个时刻执行时，可以直接写入对应的数字，例如：0，代表在 0 时执行
3) 当同时在多个时刻执行时，可以直接写入多个对应的数字，例如：0,15,30，代表在 0 时、15 时、30 时都会执行
4) 当每隔一段时间就执行时，可以在星号 “*” 后面添加斜杠和间隔的数字，例如：*/5，代表每隔 5 就会执行一次
5) 当是执行 /sbin 下的命令时，需要使用命令的全路径
）

2.2 设置周期任务计划的案例
2.2.1 案例一
0 1 * * * curl eternalcenter.com

（补充：此案例会在每天 1 点 0 时访问一次 eternalcenter.com）

2.2.2 案例二
*/5 * * * * curl eternalcenter.com

（补充：此案例会每过 5 分钟访问一次 eternalcenter.com）

2.2.3 案例三
0 0 1,5,10,15 /sbin/reboot

（补充：此案例会在每个月的 1 号 5 号 10 号 15 号的 0 点 0 分重启系统）

步骤三：查看已设置的周期任务计划
3.1 案例一：查看本用户已设置的周期任务计划
# crontab -l

3.2 案例二：以某一个用户的身份进入周期任务计划的文件
# crontab -u root -l

（补充：这里以查看 root 用户已设置的周期任务计划为例）

补充：# crontab -e 命令所编辑的文件所在位置
# crontab -e 设置的结果 /var/spool/cron/crontabs 目录中</code></pre>



<p></p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[步骤] Linux KDUMP 的开启 （用于收集内核崩溃时的信息）</title>
		<link>https://eternalcenter-2021-12.github.io/kdump/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Tue, 22 Sep 2020 15:38:52 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Setting (系统设置)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2021-12.github.io/?p=10575</guid>

					<description><![CDATA[步骤一：允许 KDUMP 使用内存1.1 修改内核参数 在这一行里： 添加： （补充：这里的 auto 代表系统会根据内存大小自动设置一个值，也可以指定一个值，例如：128M、256M 等等） 1.2 让刚刚修改的内核参数生效 步骤二：修改 KDUMP 的配置信息2.1 修改 KDUMP 的配置文件 将以下内容： 修改为： （补充：1) path /var/crash2) -c 参数会对搜集的内核崩溃时的信息进行压缩3) default reboot 参数会让 KDUMP 收集完内核崩溃时的信息后重启） 2.2 让刚刚修改的 KDUMP 配置文件生效 步骤三：测试 KDUMP3.1 造成系统内核崩溃 （注意：此时系统会自动崩溃并重启） 3.2 查看 KDUMP 生成内核崩溃信息 （补充：这里的内核崩溃信息存放目录 /var/crash/，是刚刚在 /etc/kdump.conf 文件里指定的）]]></description>
										<content:encoded><![CDATA[
<h4>步骤一：允许 KDUMP 使用内存<br>1.1 修改内核参数</h4>



<pre class="wp-block-code"><code># vim /etc/default/grub</code></pre>



<p>在这一行里：</p>



<pre class="wp-block-code"><code>.....
GRUB_CMDLINE_LINUX="......"
.....</code></pre>



<p>添加：</p>



<pre class="wp-block-code"><code>.....
GRUB_CMDLINE_LINUX="crashkernel=auto......"
.....</code></pre>



<p>（补充：这里的 auto 代表系统会根据内存大小自动设置一个值，也可以指定一个值，例如：128M、256M 等等）</p>



<h4>1.2 让刚刚修改的内核参数生效</h4>



<pre class="wp-block-code"><code># grub2-mkconfig -o /boot/grub2/grub.cfggrub2-mkconfig -o /boot/grub2/grub.cfg</code></pre>



<pre class="wp-block-code"><code># reboot</code></pre>



<h4>步骤二：修改 KDUMP 的配置信息<br>2.1 修改 KDUMP 的配置文件</h4>



<pre class="wp-block-code"><code># vim /etc/kdump.conf</code></pre>



<p>将以下内容：</p>



<pre class="wp-block-code"><code>......
path /var/crash
core_collector makedumpfile -l --message-level 1 -d 31
......</code></pre>



<p>修改为：</p>



<pre class="wp-block-code"><code>......
path /var/crash
core_collector makedumpfile -c -l --message-level 1 -d 31
default reboot
......</code></pre>



<p>（<br>补充：<br>1) path /var/crash<br>2) -c 参数会对搜集的内核崩溃时的信息进行压缩<br>3) default reboot 参数会让 KDUMP 收集完内核崩溃时的信息后重启<br>）</p>



<h4>2.2 让刚刚修改的 KDUMP 配置文件生效</h4>



<pre class="wp-block-code"><code># systemctl start kdump.service</code></pre>



<h4>步骤三：测试 KDUMP<br>3.1 造成系统内核崩溃</h4>



<pre class="wp-block-code"><code># echo 1 &gt; /proc/sys/kernel/sysrq ; echo c &gt; /proc/sysrq-trigger</code></pre>



<p>（注意：此时系统会自动崩溃并重启）</p>



<h4>3.2 查看 KDUMP 生成内核崩溃信息</h4>



<pre class="wp-block-code"><code># ls /var/crash/</code></pre>



<p>（补充：这里的内核崩溃信息存放目录 /var/crash/，是刚刚在 /etc/kdump.conf 文件里指定的）</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[步骤] CentOS&#038;RHEL 系统的优化 （通过 tuned 实现）</title>
		<link>https://eternalcenter-2021-12.github.io/tuned/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Fri, 24 Jul 2020 13:07:57 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Performance (系统性能)]]></category>
		<category><![CDATA[System Process & System Performance (系统进程 & 系统性能)]]></category>
		<category><![CDATA[System Setting (系统设置)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2021-12.github.io/?p=10254</guid>

					<description><![CDATA[步骤一：系统环境要求 服务器系统要配置好可用的软件源 步骤二：安装 tuned 系统优化软件 步骤三：查看 tuned 推荐的优化模式 步骤四：切换至 tuned 推荐的优化模式 步骤五：查看当前的优化模式 补充：取消 tuned 系统优化的方法]]></description>
										<content:encoded><![CDATA[
<h4>步骤一：系统环境要求</h4>



<p>服务器系统要配置好可用的软件源</p>



<h4>步骤二：安装 tuned 系统优化软件</h4>



<pre class="wp-block-code"><code># yum -y install tuned</code></pre>



<h4>步骤三：查看 tuned 推荐的优化模式</h4>



<pre class="wp-block-code"><code># tuned-adm recommend
virtual-guest</code></pre>



<h4>步骤四：切换至 tuned 推荐的优化模式</h4>



<pre class="wp-block-code"><code># tuned-adm profile virtual-guest</code></pre>



<h4>步骤五：查看当前的优化模式</h4>



<pre class="wp-block-code"><code># tuned-adm active
Current active profile: virtual-guest</code></pre>



<h4>补充：取消 tuned 系统优化的方法</h4>



<pre class="wp-block-code"><code># tuned-adm off</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[步骤] Linux 系统语言的切换（CentOS&#038;RHEL 版）</title>
		<link>https://eternalcenter-2021-12.github.io/language-switch/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Tue, 21 Jul 2020 12:42:16 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Setting (系统设置)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2021-12.github.io/?p=10198</guid>

					<description><![CDATA[步骤一：查看当前的系统语言 步骤二：列出所有可以安装的语言包 步骤三：切换系统语言3.1 切换系统语言的格式 3.2 切换系统语言的案例 （补充：这里以将系统语言切换为中文为例） 步骤四：查看系统语言是否切换成功]]></description>
										<content:encoded><![CDATA[
<h4>步骤一：查看当前的系统语言</h4>



<pre class="wp-block-code"><code># localectl
   System Locale: LANG=en_US.UTF-8
       VC Keymap: us
      X11 Layout: us</code></pre>



<h4>步骤二：列出所有可以安装的语言包</h4>



<pre class="wp-block-code"><code># yum list langpacks-*:</code></pre>



<h4>步骤三：切换系统语言<br>3.1 切换系统语言的格式</h4>



<pre class="wp-block-code"><code># localectl set-locale LANG=&lt;language name&gt;</code></pre>



<h4>3.2 切换系统语言的案例</h4>



<pre class="wp-block-code"><code># localectl set-locale LANG=zh_CN.utf8</code></pre>



<p>（补充：这里以将系统语言切换为中文为例）</p>



<h4>步骤四：查看系统语言是否切换成功</h4>



<pre class="wp-block-code"><code># localectl 
   System Locale: LANG=zh_CN.utf8
       VC Keymap: us
      X11 Layout: us</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[步骤] CentOS&#038;RHEL 网页图形化管理工具 cockpit</title>
		<link>https://eternalcenter-2021-12.github.io/cockpit/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Sat, 06 Jun 2020 09:07:39 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Firewall (系统防火墙)]]></category>
		<category><![CDATA[System General Log (系统普通日志)]]></category>
		<category><![CDATA[System Log (系统日志)]]></category>
		<category><![CDATA[System Login Security (系统登录安全)]]></category>
		<category><![CDATA[System Network (系统网络)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<category><![CDATA[System Operation (系统操作)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Performance (系统性能)]]></category>
		<category><![CDATA[System Port Security (系统端口安全)]]></category>
		<category><![CDATA[System Process (系统进程)]]></category>
		<category><![CDATA[System Process & System Performance (系统进程 & 系统性能)]]></category>
		<category><![CDATA[System Process Security (系统进程安全)]]></category>
		<category><![CDATA[System Security (系统安全)]]></category>
		<category><![CDATA[System Security Log (系统安全日志)]]></category>
		<category><![CDATA[System Setting (系统设置)]]></category>
		<category><![CDATA[System Software (系统软件)]]></category>
		<category><![CDATA[System Statistic Log (系统统计日志)]]></category>
		<category><![CDATA[System User (系统用户)]]></category>
		<category><![CDATA[System User & System Privilege (系统用户 & 系统权限)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2021-12.github.io/?p=9718</guid>

					<description><![CDATA[步骤一：系统环境要求 服务器系统配置好可用的软件源 步骤二：安装 cockpit （补充：cockpit 是管理单台主机的程序，cockpit-dashaboard 是管理多台主机的程序） 步骤三：启动 cockpit 步骤四：登录 cockpit 使用浏览器登录：https://&/#60;服务器的 IP 地址&#62;:9090]]></description>
										<content:encoded><![CDATA[
<h4>步骤一：系统环境要求</h4>



<p>服务器系统配置好可用的软件源</p>



<h4>步骤二：安装 cockpit</h4>



<pre class="wp-block-code"><code># yum -y install cockpit cockpit-dashaboard</code></pre>



<p>（补充：cockpit 是管理单台主机的程序，cockpit-dashaboard 是管理多台主机的程序）</p>



<h4>步骤三：启动 cockpit</h4>



<pre class="wp-block-code"><code># systemctl start cockpit</code></pre>



<h4>步骤四：登录 cockpit</h4>



<p>使用浏览器登录：https://&lt;服务器的/ IP 地址&gt;:9090</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
