<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>System Software (系统软件) &#8211; Eternal Center</title>
	<atom:link href="https://eternalcenter-2021-12.github.io/category/system/system-operation-system-setting-system-software/system-software/feed/" rel="self" type="application/rss+xml" />
	<link>https://eternalcenter-2021-12.github.io/</link>
	<description></description>
	<lastBuildDate>Sun, 26 Dec 2021 09:06:03 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	
	<item>
		<title>[步骤] Linux 全局加密 SSL 的设置 （CentOS 8 &#038; RHEL 8 版）</title>
		<link>https://eternalcenter-2021-12.github.io/global-ssl-centos8rhel8/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Sat, 31 Jul 2021 10:11:21 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Network (系统网络)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Patch (系统补丁)]]></category>
		<category><![CDATA[System Security (系统安全)]]></category>
		<category><![CDATA[System Setting (系统设置)]]></category>
		<category><![CDATA[System Software (系统软件)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2021-12.github.io/?p=17184</guid>

					<description><![CDATA[步骤一：查看当前 SSL 全局加密 SSL 的状况 （补充：这里的 DEFAULT 表示可以使用 2048 位及以上位数的 SSL） 步骤二：切换当前 SSL 全局加密 SSL （补充：1) 这里以将全局加密 SSL 切换到 FUTURE 状态为例2) 此时只能使用 4096 位及以上位数的 SSL）]]></description>
										<content:encoded><![CDATA[
<h4>步骤一：查看当前 SSL 全局加密 SSL 的状况</h4>



<pre class="wp-block-code"><code># update-crypto-policies --show
DEFAULT</code></pre>



<p>（补充：这里的 DEFAULT 表示可以使用 2048 位及以上位数的 SSL）</p>



<h4>步骤二：切换当前 SSL 全局加密 SSL</h4>



<pre class="wp-block-code"><code># update-crypto-policies --set FUTURE</code></pre>



<p>（<br>补充：<br>1) 这里以将全局加密 SSL 切换到 FUTURE 状态为例<br>2) 此时只能使用 4096 位及以上位数的 SSL<br>）</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[内容] Linux 官方软件库链接列表 （CentOS 版）</title>
		<link>https://eternalcenter-2021-12.github.io/official-repo-list-centos/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Tue, 27 Apr 2021 08:03:20 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Computer & System Hardware & System Installation & System Upgradation (系统电脑 & 系统硬件 & 系统安装 & 系统升级)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Software (系统软件)]]></category>
		<category><![CDATA[System Upgradation (系统升级)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2021-12.github.io/?p=14151</guid>

					<description><![CDATA[内容一：CentOS 7 基础库列表1.1 CentOS 7 基础库官方链接列表1.1.1 CentOS-7 &#8211; Base http://mirror.centos.org/centos/7/os/x86_64/ 1.1.2 CentOS-7 &#8211; Updates http://mirror.centos.org/centos/7/updates/x86_64/ 1.1.3 CentOS-7 &#8211; Extras http://mirror.centos.org/centos/7/extras/x86_64/ 1.1.4 CentOS-7 &#8211; Plus http://mirror.centos.org/centos/7/centosplus/x86_64/ 1.2 CentOS 7 基础库官方推荐列表1.2.1 CentOS-7 &#8211; Base http://mirrorlist.centos.org/?release=7&#038;arch=x86_64&#038;repo=os&#038;infra=$infra 1.2.2 CentOS-7 &#8211; Updates http://mirrorlist.centos.org/?release=7&#038;arch=x86_64&#038;repo=updates&#038;infra=$infra 1.2.3 CentOS-7 &#8211; Extras http://mirrorlist.centos.org/?release=7&#038;arch=x86_64&#038;repo=extras&#038;infra=$infra 1.2.4 CentOS-7 &#8211; Plus http://mirrorlist.centos.org/?release=7&#038;arch=x86_64&#038;repo=centosplus&#038;infra=$infra 内容二：CentOS 8 基础库列表2.1 CentOS 8 基础库官方链接列表2.1.1 CentOS &#8230; <p class="link-more"><a href="https://eternalcenter-2021-12.github.io/official-repo-list-centos/" class="more-link">Continue reading<span class="screen-reader-text"> "[内容] Linux 官方软件库链接列表 （CentOS 版）"</span></a></p>]]></description>
										<content:encoded><![CDATA[
<h4>内容一：CentOS 7 基础库列表<br>1.1 CentOS 7 基础库官方链接列表<br>1.1.1 CentOS-7 &#8211; Base</h4>



<p>http://mirror.centos.org/centos/7/os/x86_64/</p>



<h4>1.1.2 CentOS-7 &#8211; Updates</h4>



<p>http://mirror.centos.org/centos/7/updates/x86_64/</p>



<h4>1.1.3 CentOS-7 &#8211; Extras</h4>



<p>http://mirror.centos.org/centos/7/extras/x86_64/</p>



<h4>1.1.4 CentOS-7 &#8211; Plus</h4>



<p>http://mirror.centos.org/centos/7/centosplus/x86_64/</p>



<h4>1.2 CentOS 7 基础库官方推荐列表<br>1.2.1 CentOS-7 &#8211; Base</h4>



<p>http://mirrorlist.centos.org/?release=7&#038;arch=x86_64&#038;repo=os&#038;infra=$infra</p>



<h4>1.2.2 CentOS-7 &#8211; Updates</h4>



<p>http://mirrorlist.centos.org/?release=7&#038;arch=x86_64&#038;repo=updates&#038;infra=$infra</p>



<h4>1.2.3 CentOS-7 &#8211; Extras</h4>



<p>http://mirrorlist.centos.org/?release=7&#038;arch=x86_64&#038;repo=extras&#038;infra=$infra</p>



<h4>1.2.4 CentOS-7 &#8211; Plus</h4>



<p>http://mirrorlist.centos.org/?release=7&#038;arch=x86_64&#038;repo=centosplus&#038;infra=$infra</p>



<h4>内容二：CentOS 8 基础库列表<br>2.1 CentOS 8 基础库官方链接列表<br>2.1.1 CentOS Linux 8 &#8211; BaseOS</h4>



<p>http://mirror.centos.org/centos/8/BaseOS/x86_64/os/</p>



<h4>2.1.2 CentOS-8 &#8211; Updates</h4>



<p>http://mirror.centos.org/centos/8/AppStream/x86_64/os/</p>



<h4>2.2 CentOS 8 基础库官方推荐列表<br>2.2.1 CentOS Linux 8 &#8211; BaseOS</h4>



<p>http://mirrorlist.centos.org/?release=8&#038;arch=x86_64&#038;repo=BaseOS&#038;infra=$infra</p>



<h4>2.2.2 CentOS Linux 8 &#8211; AppStream</h4>



<p>http://mirrorlist.centos.org/?release=8&#038;arch=x86_64&#038;repo=AppStream&#038;infra=$infra</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[工具] Shell 批量设置官方软件源 （openSUSE  Leap 15.2 版）</title>
		<link>https://eternalcenter-2021-12.github.io/shell-opensuse-official-repo/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Sat, 06 Feb 2021 06:21:52 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[Languages (语言)]]></category>
		<category><![CDATA[Shell]]></category>
		<category><![CDATA[Shell Deployment (部署)]]></category>
		<category><![CDATA[Shell Others (其他)]]></category>
		<category><![CDATA[Shell Tool (工具)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Computer & System Hardware & System Installation & System Upgradation (系统电脑 & 系统硬件 & 系统安装 & 系统升级)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Setting (系统设置)]]></category>
		<category><![CDATA[System Software (系统软件)]]></category>
		<category><![CDATA[System Upgradation (系统升级)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2021-12.github.io/?p=13277</guid>

					<description><![CDATA[介绍： 作者：朱明宇名称：批量设置官方软件源（openSUSE 版）作用：批量设置官方软件源（openSUSE 版） 使用方法：1. 服务器清单 $add_repo_servers_list.txt 每一个服务器名占用一行，并和此脚本放在同一目录下2. 在此脚本的分割线内写入相应的内容3. 给此脚本添加执行权限4. 执行此脚本 脚本分割线里的变量：add_repo_servers_list.txt #指定存放要设置官方软件源的文件 注意：1. 此脚本执行前必须要先保证执行此脚本的用户能无密码 ssh 远程这些远程服务器2. 服务器的系统需要是 openSUSE 15.2 版本3. 服务器系统要配置好可用的软件源（最好是软件数量最多的官方版本）4. 这些远程服务器要能够连接外网 脚本：]]></description>
										<content:encoded><![CDATA[
<h2>介绍：</h2>



<p>作者：朱明宇<br>名称：批量设置官方软件源（openSUSE 版）<br>作用：批量设置官方软件源（openSUSE 版）</p>



<p>使用方法：<br>1. 服务器清单 $add_repo_servers_list.txt 每一个服务器名占用一行，并和此脚本放在同一目录下<br>2. 在此脚本的分割线内写入相应的内容<br>3. 给此脚本添加执行权限<br>4. 执行此脚本</p>



<p>脚本分割线里的变量：<br>add_repo_servers_list.txt #指定存放要设置官方软件源的文件</p>



<p>注意：<br>1. 此脚本执行前必须要先保证执行此脚本的用户能无密码 ssh 远程这些远程服务器<br>2. 服务器的系统需要是 openSUSE 15.2 版本<br>3. 服务器系统要配置好可用的软件源（最好是软件数量最多的官方版本）<br>4. 这些远程服务器要能够连接外网</p>



<h2>脚本：</h2>



<pre class="wp-block-code"><code>#!/bin/bash

####################### Separator ########################

add_repo_servers_list.txt

####################### Separator ########################

cat add_repo_servers_list.txt
read -p "will add opensuse_leap_15.2 repo please input y " a
echo $a

if &#91; "$a" != "y" ];then
        echo "you don't agree so exit now"
        exit
fi

for i in `awk '{print $1}' add_repo_servers_list.txt`
do
        ssh $i '
        sudo -u root su - root -c "zypper mr -da"
        sudo -u root su - root -c "zypper ar -fcg http://download.opensuse.org/distribution/leap/15.2/repo/oss/ OpenSUSE_Leap_152_x64_update-oss"
        sudo -u root su - root -c "zypper ar -fcg http://download.opensuse.org/distribution/leap/15.2/repo/non-oss/ OpenSUSE_Leap_152_x64_update-non-oss"
        sudo -u root su - root -c "zypper ar -fcg http://download.opensuse.org/update/leap/15.2/oss/ OpenSUSE_Leap_152_x64_oss"
        sudo -u root su - root -c "zypper ar -fcg http://download.opensuse.org/update/leap/15.2/non-oss/ OpenSUSE_Leap_152_x64_non-oss"
        sudo -u root su - root -c "zypper ref"
done</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[内容] openSUSE 软件库的使用 （通过本地镜像实现）</title>
		<link>https://eternalcenter-2021-12.github.io/zypper-local/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Thu, 04 Feb 2021 06:08:43 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Computer & System Hardware & System Installation & System Upgradation (系统电脑 & 系统硬件 & 系统安装 & 系统升级)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Patch (系统补丁)]]></category>
		<category><![CDATA[System Security (系统安全)]]></category>
		<category><![CDATA[System Software (系统软件)]]></category>
		<category><![CDATA[System Upgradation (系统升级)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2021-12.github.io/?p=13269</guid>

					<description><![CDATA[步骤一：挂载本地镜像 （补充：这里以挂载 /dev/sr1 到 /mnt 目录为例） 步骤二：添加本地镜里的软件源 （补充：这里以将 file:///mnt/Module-Basesystem 添加到软件源并命名为 local 为例）]]></description>
										<content:encoded><![CDATA[
<h4>步骤一：挂载本地镜像</h4>



<pre class="wp-block-code"><code># mount /dev/sr1 /mnt</code></pre>



<p>（补充：这里以挂载 /dev/sr1 到 /mnt 目录为例）</p>



<h4>步骤二：添加本地镜里的软件源</h4>



<pre class="wp-block-code"><code># zypper ar file:///mnt/Module-Basesystem local</code></pre>



<p>（补充：这里以将 file:///mnt/Module-Basesystem 添加到软件源并命名为 local 为例）</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[命令] CentOS 8 &#038; RHEL 8 命令 （管理软件包）</title>
		<link>https://eternalcenter-2021-12.github.io/dnf/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Fri, 18 Dec 2020 06:09:53 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Software (系统软件)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2021-12.github.io/?p=13089</guid>

					<description><![CDATA[案例一： 安装某个软件包1.1 交互式安装某个软件包 （补充：这里以安装名为 Nginx 软件包为例） 1.2 非交互式安装某个软件包 （补充：这里以安装名为 Nginx 软件包为例） 案例二：删除某一个软件包2.1 交互式安装某个软件包 （补充：这里以删除名为 Nginx 软件包为例） 2.2 非交互式安装某个软件包 （补充：这里以删除名为 Nginx 软件包为例） 案例三：升级所有软件包和内核3.1 非交互式升级所有软件包和内核 3.2 交互式升级所有软件包和内核 3.3 交互式升级除了某一个软件包或内核外的所有内容 （补充：这里以升级除了以 kernel 开头以外的所有软件包和内核为例） 案例四：查找提供某个命令的软件包 （补充：这里以查找提供 yum 命令的软件包为例） 案例五：查看所有已安装的软件包 案例六：查看某一个软件包的具体信息 （补充：这里以查看名为 Nginx 软件包为例） 案例七：查看 dnf 的历史命令 案例八：查看 dnf 安装包的记录]]></description>
										<content:encoded><![CDATA[
<h4>案例一： 安装某个软件包<br>1.1 交互式安装某个软件包</h4>



<pre class="wp-block-code"><code># dnf install nginx</code></pre>



<p>（补充：这里以安装名为 Nginx 软件包为例）</p>



<h4>1.2 非交互式安装某个软件包</h4>



<pre class="wp-block-code"><code># dnf -y install nginx</code></pre>



<p>（补充：这里以安装名为 Nginx 软件包为例）</p>



<h4>案例二：删除某一个软件包<br>2.1 交互式安装某个软件包</h4>



<pre class="wp-block-code"><code># dnf remove nginx</code></pre>



<p>（补充：这里以删除名为 Nginx 软件包为例）</p>



<h4>2.2 非交互式安装某个软件包</h4>



<pre class="wp-block-code"><code># dnf -y remove nginx</code></pre>



<p>（补充：这里以删除名为 Nginx 软件包为例）</p>



<h4>案例三：升级所有软件包和内核<br>3.1 非交互式升级所有软件包和内核</h4>



<pre class="wp-block-code"><code># dnf update</code></pre>



<h4> 3.2 交互式升级所有软件包和内核</h4>



<pre class="wp-block-code"><code># dnf -y update</code></pre>



<h4>3.3 交互式升级除了某一个软件包或内核外的所有内容</h4>



<pre class="wp-block-code"><code># dnf update --exclude=kernel*</code></pre>



<p>（补充：这里以升级除了以 kernel 开头以外的所有软件包和内核为例）</p>



<h4>案例四：查找提供某个命令的软件包</h4>



<pre class="wp-block-code"><code># dnf provides yum</code></pre>



<p>（补充：这里以查找提供 yum 命令的软件包为例）</p>



<h4>案例五：查看所有已安装的软件包</h4>



<pre class="wp-block-code"><code># dnf list all</code></pre>



<h4>案例六：查看某一个软件包的具体信息</h4>



<pre class="wp-block-code"><code># dnf list all | grep nginx</code></pre>



<p>（补充：这里以查看名为 Nginx 软件包为例）</p>



<h4>案例七：查看 dnf 的历史命令</h4>



<pre class="wp-block-code"><code># dnf history</code></pre>



<h4>案例八：查看 dnf 安装包的记录</h4>



<pre class="wp-block-code"><code># dnf history info</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[步骤] Linux 脚本的管理 （通过 systemd 实现）</title>
		<link>https://eternalcenter-2021-12.github.io/systemctl-script/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Wed, 04 Nov 2020 10:17:39 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Operation (系统操作)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Process (系统进程)]]></category>
		<category><![CDATA[System Process & System Performance (系统进程 & 系统性能)]]></category>
		<category><![CDATA[System Software (系统软件)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2021-12.github.io/?p=11652</guid>

					<description><![CDATA[步骤一：要被管理的脚本 创建以下内容： （补充：这里以创建 /etc/root/for.sh 脚本为例） 步骤二：创建 systemctl 的管理文件 创建以下内容： （补充：这里以创建 /etc/systemd/system/12456.service 来管理 ExecStart=/root/12456.sh 为例） 步骤三：加载刚刚创建的 systemctl 管理文件 步骤四：通过 systemd 管理脚本4.1 启动脚本 4.2 关闭脚本 4.3 重启脚本 4.4 让脚本开机自启]]></description>
										<content:encoded><![CDATA[
<h4>步骤一：要被管理的脚本</h4>



<pre class="wp-block-code"><code># vim /root/12456.sh</code></pre>



<p>创建以下内容：</p>



<pre class="wp-block-code"><code>#!/bin/bash
for i in {1..5}
do
echo $i
done</code></pre>



<p>（补充：这里以创建 /etc/root/for.sh 脚本为例）</p>



<h4>步骤二：创建 systemctl 的管理文件</h4>



<pre class="wp-block-code"><code># vim /etc/systemd/system/12456.service</code></pre>



<p>创建以下内容：</p>



<pre class="wp-block-code"><code>&#91;Unit]
Description=12345
After=default.target

&#91;Service]
Type=oneshot
ExecStart=/root/12456.sh

&#91;Install]
WantedBy=default.target</code></pre>



<p>（补充：这里以创建 /etc/systemd/system/12456.service 来管理 ExecStart=/root/12456.sh 为例）</p>



<h4>步骤三：加载刚刚创建的 systemctl 管理文件</h4>



<pre class="wp-block-code"><code># systemctl daemon-reload</code></pre>



<h4>步骤四：通过 systemd 管理脚本<br>4.1 启动脚本</h4>



<pre class="wp-block-code"><code># systemctl start 12456.service</code></pre>



<h4>4.2 关闭脚本</h4>



<pre class="wp-block-code"><code># systemctl stop 12456.service</code></pre>



<h4>4.3 重启脚本</h4>



<pre class="wp-block-code"><code># systemctl restart 12456.service</code></pre>



<h4>4.4 让脚本开机自启</h4>



<pre class="wp-block-code"><code># systemctl enable 12456.service</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[排错] Linux 解决运行时程序突然停止</title>
		<link>https://eternalcenter-2021-12.github.io/break-debug/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Mon, 12 Oct 2020 13:25:35 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Software (系统软件)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2021-12.github.io/?p=11527</guid>

					<description><![CDATA[解决方法： 通过系统日志查看程序被关闭的原因 或者： 或者： （补充：这里的 -T 代表要显示时间）]]></description>
										<content:encoded><![CDATA[
<h2>解决方法：</h2>



<p>通过系统日志查看程序被关闭的原因</p>



<pre class="wp-block-code"><code># vim /var/log/message</code></pre>



<p>或者：</p>



<pre class="wp-block-code"><code># journalctl</code></pre>



<p>或者：</p>



<pre class="wp-block-code"><code># dmesg –T</code></pre>



<p>（补充：这里的 -T 代表要显示时间）</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[步骤] CentOS&#038;RHEL TeamViewer 的安装</title>
		<link>https://eternalcenter-2021-12.github.io/teamviewer/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Sat, 19 Sep 2020 06:39:15 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Software (系统软件)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2021-12.github.io/?p=10561</guid>

					<description><![CDATA[软件准备： 在 TeamViewer 的官网上下载软件 TeamViewer： https://www.teamviewer.cn/cn/download/linux/ 正文： 步骤一：系统环境要求 服服务器系统要配置好可用的软件源 步骤二：安装 epel 软件库 步骤三：安装图形系统桌面3.1 安装图形系统桌面 3.2 禁止图形系统桌面以 Wayland 的方式启动 将以下内容： 修改为： （补充：此步骤是为了避免让 TeamViewer 连接时出现黑屏） 3.3 设置系统开机进入图形系统桌面 步骤四：安装 TeamViewer （补充：这里以安装 15.9.5.x86_64 版本的 teamviewer 为例） 步骤四：重启系统]]></description>
										<content:encoded><![CDATA[
<h2>软件准备：</h2>



<p>在 TeamViewer 的官网上下载软件 TeamViewer：</p>



<p class="has-text-align-center"><a href="https://www.teamviewer.cn/cn/download/linux/" target="_blank" rel="noreferrer noopener">https://www.teamviewer.cn/cn/download/linux/</a></p>



<div style="height:100px" aria-hidden="true" class="wp-block-spacer"></div>



<h2>正文：</h2>



<h4>步骤一：系统环境要求</h4>



<p>服服务器系统要配置好可用的软件源</p>



<h4>步骤二：安装 epel 软件库</h4>



<pre class="wp-block-code"><code># rpm -Uvh https://dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/e/epel-release-8-8.el8.noarch.rpm</code></pre>



<h4>步骤三：安装图形系统桌面<br>3.1 安装图形系统桌面</h4>



<pre class="wp-block-code"><code># yum groupinstall -y "Server with GUI"</code></pre>



<h4>3.2 禁止图形系统桌面以 Wayland 的方式启动</h4>



<pre class="wp-block-code"><code># vim /etc/gdm/custom.conf</code></pre>



<p>将以下内容：</p>



<pre class="wp-block-code"><code>#WaylandEnable=false</code></pre>



<p>修改为：</p>



<pre class="wp-block-code"><code>WaylandEnable=false</code></pre>



<p>（补充：此步骤是为了避免让 TeamViewer 连接时出现黑屏）</p>



<h4>3.3 设置系统开机进入图形系统桌面</h4>



<pre class="wp-block-code"><code># systemctl set-default graphical.target</code></pre>



<h4>步骤四：安装 TeamViewer</h4>



<pre class="wp-block-code"><code># yum -y localinstall teamviewer_15.9.5.x86_64.rpm</code></pre>



<p>（补充：这里以安装 15.9.5.x86_64 版本的 teamviewer 为例）</p>



<h4>步骤四：重启系统</h4>



<pre class="wp-block-code"><code># reboot</code></pre>



<p></p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[内容] openSUSE 官方认可的第三方软件源列表网址</title>
		<link>https://eternalcenter-2021-12.github.io/opensuse-additional-repositories/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Wed, 22 Jul 2020 06:36:28 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Software (系统软件)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2021-12.github.io/?p=10230</guid>

					<description><![CDATA[https://zh.opensuse.org/%E7%AC%AC%E4%B8%89%E6%96%B9%E8%BD%AF%E4%BB%B6%E6%BA%90]]></description>
										<content:encoded><![CDATA[
<p><a href="https://zh.opensuse.org/%E7%AC%AC%E4%B8%89%E6%96%B9%E8%BD%AF%E4%BB%B6%E6%BA%90">https://zh.opensuse.org/%E7%AC%AC%E4%B8%89%E6%96%B9%E8%BD%AF%E4%BB%B6%E6%BA%90</a></p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[命令] Linux 命令 service （管理程序单元）</title>
		<link>https://eternalcenter-2021-12.github.io/service-command/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Tue, 21 Jul 2020 09:14:32 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Operation (系统操作)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Process (系统进程)]]></category>
		<category><![CDATA[System Process & System Performance (系统进程 & 系统性能)]]></category>
		<category><![CDATA[System Software (系统软件)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2021-12.github.io/?p=10158</guid>

					<description><![CDATA[内容一：列出所有受 systemctl 管理的单元 内容二：启动某一个单元 内容三：停止某一个单元]]></description>
										<content:encoded><![CDATA[
<h4>内容一：列出所有受 systemctl 管理的单元</h4>



<pre class="wp-block-code"><code># service -–status-all</code></pre>



<h4>内容二：启动某一个单元</h4>



<pre class="wp-block-code"><code># service &lt;unit&gt; start</code></pre>



<h4>内容三：停止某一个单元</h4>



<pre class="wp-block-code"><code># service &lt;unit&gt; stop</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[排错] CentOS&#038;RHEL 解决使用 yum 时报错 “rpmdb BDB0113 Thread/process” 或者被卡住</title>
		<link>https://eternalcenter-2021-12.github.io/yum-bdb0113-debug/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Mon, 20 Jul 2020 08:36:54 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Software (系统软件)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2021-12.github.io/?p=10148</guid>

					<description><![CDATA[报错代码： 解决方法： 步骤一：删除 yum 的数据库 步骤二：重建 yum 软件 步骤三：清除 yum 缓存 步骤四：查看 yum 是否恢复正常]]></description>
										<content:encoded><![CDATA[
<h2>报错代码：</h2>



<pre class="wp-block-code"><code>rpmdb BDB0113 Thread/process</code></pre>



<h2>解决方法：</h2>



<h4>步骤一：删除 yum 的数据库</h4>



<pre class="wp-block-code"><code># rm -rf /var/lib/rpm/_db*</code></pre>



<h4>步骤二：重建 yum 软件</h4>



<pre class="wp-block-code"><code># rpm --rebuilddb</code></pre>



<h4>步骤三：清除 yum 缓存</h4>



<pre class="wp-block-code"><code># yum clean all</code></pre>



<h4>步骤四：查看 yum 是否恢复正常</h4>



<pre class="wp-block-code"><code># yum repolist</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[命令] CentOS&#038;RHEL 命令 yum-config-manager （管理软件库）</title>
		<link>https://eternalcenter-2021-12.github.io/yum-config-manager/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Thu, 16 Jul 2020 15:14:05 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Software (系统软件)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2021-12.github.io/?p=10076</guid>

					<description><![CDATA[案例一：添加某个软件源 （补充：这里以添加 http://192.168.101.254/CentOS7/ 为例） 案例二：禁用某个软件源 （补充：这里以禁用 192.168.101.254_CentOS7_ 为例） 案例三：启用某个软件源 （补充：这里以启用 192.168.101.254_CentOS7_ 为例）]]></description>
										<content:encoded><![CDATA[
<h4>案例一：添加某个软件源</h4>



<pre class="wp-block-code"><code># yum-config-manager --add-repo=http://192.168.101.254/CentOS7/
已加载插件：fastestmirror
adding repo from: http://192.168.101.254/CentOS7/

&#91;192.168.101.254_CentOS7_]
name=added from: http://192.168.101.254/CentOS7/
baseurl=http://192.168.101.254/CentOS7/
enabled=1</code></pre>



<p>（补充：这里以添加 http://192.168.101.254/CentOS7/ 为例）</p>



<h4>案例二：禁用某个软件源</h4>



<pre class="wp-block-code"><code># yum-config-manager --disable 192.168.101.254_CentOS7_</code></pre>



<p>（补充：这里以禁用 192.168.101.254_CentOS7_ 为例）</p>



<h4>案例三：启用某个软件源</h4>



<pre class="wp-block-code"><code># yum-config-manager --enable 192.168.101.254_CentOS7_</code></pre>



<p>（补充：这里以启用 192.168.101.254_CentOS7_ 为例）</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[命令] Linux 命令 rpm （管理软件包）</title>
		<link>https://eternalcenter-2021-12.github.io/rpm/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Thu, 16 Jul 2020 12:42:12 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Software (系统软件)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2021-12.github.io/?p=10072</guid>

					<description><![CDATA[案例一： 安装某个软件 （补充：这里以安装 Nginx 为例） 案例二：删除某一个软件 （补充：这里以卸载 Nginx 为例） 案例三：查看所有已安装的软件包 案例四：查看某一个软件包的具体信息 （补充：这里以查看 Nginx 的信息为例） 案例五：查看某一个软件包的所有文件 （补充：这里以查看 Nginx 的信息为例） 案例六：查看某一个软件包的配置文件 （补充：这里以查看 Nginx 的信息为例） 案例七：测试安装某一个软件包 （补充：这里以测试安装 proxychains 为例）]]></description>
										<content:encoded><![CDATA[
<h4>案例一： 安装某个软件</h4>



<pre class="wp-block-code"><code># rpm -ivh nginx</code></pre>



<p>（补充：这里以安装 Nginx 为例）</p>



<h4>案例二：删除某一个软件</h4>



<pre class="wp-block-code"><code># rpm -e nginx</code></pre>



<p>（补充：这里以卸载 Nginx 为例）</p>



<h4>案例三：查看所有已安装的软件包</h4>



<pre class="wp-block-code"><code># rpm -qa</code></pre>



<h4>案例四：查看某一个软件包的具体信息</h4>



<pre class="wp-block-code"><code># rpm -qi nginx</code></pre>



<p>（补充：这里以查看 Nginx 的信息为例）</p>



<h4>案例五：查看某一个软件包的所有文件</h4>



<pre class="wp-block-code"><code># rpm -ql nginx</code></pre>



<p>（补充：这里以查看 Nginx 的信息为例）</p>



<h4>案例六：查看某一个软件包的配置文件</h4>



<pre class="wp-block-code"><code># rpm -qc nginx</code></pre>



<p>（补充：这里以查看 Nginx 的信息为例）</p>



<h4>案例七：测试安装某一个软件包</h4>



<pre class="wp-block-code"><code># rpm -ivh --test proxychains</code></pre>



<p>（补充：这里以测试安装 proxychains 为例）</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[步骤] CentOS&#038;RHEL 网页图形化管理工具 cockpit</title>
		<link>https://eternalcenter-2021-12.github.io/cockpit/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Sat, 06 Jun 2020 09:07:39 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Firewall (系统防火墙)]]></category>
		<category><![CDATA[System General Log (系统普通日志)]]></category>
		<category><![CDATA[System Log (系统日志)]]></category>
		<category><![CDATA[System Login Security (系统登录安全)]]></category>
		<category><![CDATA[System Network (系统网络)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<category><![CDATA[System Operation (系统操作)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Performance (系统性能)]]></category>
		<category><![CDATA[System Port Security (系统端口安全)]]></category>
		<category><![CDATA[System Process (系统进程)]]></category>
		<category><![CDATA[System Process & System Performance (系统进程 & 系统性能)]]></category>
		<category><![CDATA[System Process Security (系统进程安全)]]></category>
		<category><![CDATA[System Security (系统安全)]]></category>
		<category><![CDATA[System Security Log (系统安全日志)]]></category>
		<category><![CDATA[System Setting (系统设置)]]></category>
		<category><![CDATA[System Software (系统软件)]]></category>
		<category><![CDATA[System Statistic Log (系统统计日志)]]></category>
		<category><![CDATA[System User (系统用户)]]></category>
		<category><![CDATA[System User & System Privilege (系统用户 & 系统权限)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2021-12.github.io/?p=9718</guid>

					<description><![CDATA[步骤一：系统环境要求 服务器系统配置好可用的软件源 步骤二：安装 cockpit （补充：cockpit 是管理单台主机的程序，cockpit-dashaboard 是管理多台主机的程序） 步骤三：启动 cockpit 步骤四：登录 cockpit 使用浏览器登录：https://&/#60;服务器的 IP 地址&#62;:9090]]></description>
										<content:encoded><![CDATA[
<h4>步骤一：系统环境要求</h4>



<p>服务器系统配置好可用的软件源</p>



<h4>步骤二：安装 cockpit</h4>



<pre class="wp-block-code"><code># yum -y install cockpit cockpit-dashaboard</code></pre>



<p>（补充：cockpit 是管理单台主机的程序，cockpit-dashaboard 是管理多台主机的程序）</p>



<h4>步骤三：启动 cockpit</h4>



<pre class="wp-block-code"><code># systemctl start cockpit</code></pre>



<h4>步骤四：登录 cockpit</h4>



<p>使用浏览器登录：https://&lt;服务器的/ IP 地址&gt;:9090</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[命令] Linux 命令 kill （进程杀死）</title>
		<link>https://eternalcenter-2021-12.github.io/kill/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Sat, 30 May 2020 05:19:38 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<category><![CDATA[System Operation (系统操作)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Performance (系统性能)]]></category>
		<category><![CDATA[System Process (系统进程)]]></category>
		<category><![CDATA[System Process & System Performance (系统进程 & 系统性能)]]></category>
		<category><![CDATA[System Process Security (系统进程安全)]]></category>
		<category><![CDATA[System Security (系统安全)]]></category>
		<category><![CDATA[System Software (系统软件)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2021-12.github.io/?p=9614</guid>

					<description><![CDATA[内容目录： 内容一：查看 kill 所有可用的选项 内容二：kill 的常用案例2.1 案例一：强杀某一个 pid 号2.2 案例二：正常退出某一个 pid 号2.3 案例三：杀死某一个进程名称下的所有 pid 号 具体的内容： 内容一：查看 kill 所有可用的选项 内容二：kill 的常用案例2.1 案例一：强杀某一个 pid 号 或者： 2.2 案例二：正常退出某一个 pid 号 2.3 案例三：杀死某一个进程名称下的所有 pid 号]]></description>
										<content:encoded><![CDATA[
<h2>内容目录：</h2>



<h4>内容一：查看 kill 所有可用的选项</h4>



<h4>内容二：kill 的常用案例<br>2.1 案例一：强杀某一个 pid 号<br>2.2 案例二：正常退出某一个 pid 号<br>2.3 案例三：杀死某一个进程名称下的所有 pid 号</h4>



<h2>具体的内容：</h2>



<h4>内容一：查看 kill 所有可用的选项</h4>



<h4>内容二：kill 的常用案例<br>2.1 案例一：强杀某一个 pid 号</h4>



<pre class="wp-block-code"><code># kill -9 &lt;pid number&gt;</code></pre>



<p>或者：</p>



<pre class="wp-block-code"><code># kill -&lt;kill option&gt; &lt;pid number&gt;</code></pre>



<h4>2.2 案例二：正常退出某一个 pid 号</h4>



<pre class="wp-block-code"><code># kill -15 &lt;pid number&gt;</code></pre>



<h4>2.3 案例三：杀死某一个进程名称下的所有 pid 号</h4>



<pre class="wp-block-code"><code># killall &lt;process name&gt;</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[内容] Linux 后台进程的管理</title>
		<link>https://eternalcenter-2021-12.github.io/background-process/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Sat, 30 May 2020 04:01:08 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<category><![CDATA[System Operation (系统操作)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Performance (系统性能)]]></category>
		<category><![CDATA[System Process (系统进程)]]></category>
		<category><![CDATA[System Process & System Performance (系统进程 & 系统性能)]]></category>
		<category><![CDATA[System Process Security (系统进程安全)]]></category>
		<category><![CDATA[System Security (系统安全)]]></category>
		<category><![CDATA[System Software (系统软件)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2021-12.github.io/?p=9608</guid>

					<description><![CDATA[内容目录： 内容一：将进程放入后台1.1 直接将一个进程放到后台1.2 将一个目前正在前台运行的进程放到后台 内容二：查看放入后台的进程2.1 查看所有放入后台的进程2.2 查看某一个放入后台的进程 内容三：管理放入后台的进程3.1 在后台启动放入后台的进程3.1.1 在后台启动放入后台的进程（通过后台进程号）3.1.2 在后台启动放入后台的进程（通过后台进程名）3.2 在前台启动放入后台的进程3.2.1 在前台启动放入后台的进程（通过后台进程号）3.2.2 在前台启动放入后台的进程（通过后台进程名）3.3 杀死放入后台的进程3.3.1 杀死放入后台的进程（通过后台进程号）3.3.2 杀死放入后台的进程（通过后台进程名） 具体的内容： 内容一：将进程放入后台1.1 直接将一个进程放到后台 1.2 将一个目前正在前台运行的进程放到后台 按下 “ctrl” 和 “z” 内容二：查看放入后台的进程2.1 查看所有放入后台的进程 2.2 查看某一个放入后台的进程2.2.1 查看某一个放入后台进程（通过后台进程号） 2.2.2 查看某一个放入后台进程（通过后台进程名） （注意：只有后台进程名唯一时此操作才有效） 内容三：管理放入后台的进程3.1 在后台启动放入后台的进程3.1.1 在后台启动放入后台的进程（通过后台进程号） （注意：只有可以在后台启动的进程才能在后台启动） 3.1.2 在后台启动放入后台的进程（通过后台进程名） （注意：只有可以在后台启动的进程才能在后台启动，且只有后台进程名唯一时此操作才有效） 3.2 在前台启动放入后台的进程3.2.1 在前台启动放入后台的进程（通过后台进程号） 3.2.2 在前台启动放入后台的进程（通过后台进程名） （注意：只有后台进程名唯一时此操作才有效） 3.3 杀死放入后台的进程3.3.1 杀死放入后台的进程（通过后台进程号） （补充：这里可以配合各种 kill 选项进行操作，例如 kill -9） &#8230; <p class="link-more"><a href="https://eternalcenter-2021-12.github.io/background-process/" class="more-link">Continue reading<span class="screen-reader-text"> "[内容] Linux 后台进程的管理"</span></a></p>]]></description>
										<content:encoded><![CDATA[
<h2>内容目录：</h2>



<h4>内容一：将进程放入后台<br>1.1 直接将一个进程放到后台<br>1.2 将一个目前正在前台运行的进程放到后台</h4>



<h4>内容二：查看放入后台的进程<br>2.1 查看所有放入后台的进程<br>2.2 查看某一个放入后台的进程</h4>



<h4>内容三：管理放入后台的进程<br>3.1 在后台启动放入后台的进程<br>3.1.1 在后台启动放入后台的进程（通过后台进程号）<br>3.1.2 在后台启动放入后台的进程（通过后台进程名）<br>3.2 在前台启动放入后台的进程<br>3.2.1 在前台启动放入后台的进程（通过后台进程号）<br>3.2.2 在前台启动放入后台的进程（通过后台进程名）<br>3.3 杀死放入后台的进程<br>3.3.1 杀死放入后台的进程（通过后台进程号）<br>3.3.2 杀死放入后台的进程（通过后台进程名）</h4>



<h2>具体的内容：</h2>



<h4>内容一：将进程放入后台<br>1.1 直接将一个进程放到后台</h4>



<pre class="wp-block-code"><code># firefox&amp;</code></pre>



<h4>1.2 将一个目前正在前台运行的进程放到后台</h4>



<p>按下 “ctrl” 和 “z”</p>



<h4>内容二：查看放入后台的进程<br>2.1 查看所有放入后台的进程</h4>



<pre class="wp-block-code"><code># jobs</code></pre>



<h4>2.2 查看某一个放入后台的进程<br>2.2.1 查看某一个放入后台进程（通过后台进程号）</h4>



<pre class="wp-block-code"><code># jobs %&lt;background process number&gt;</code></pre>



<h4>2.2.2 查看某一个放入后台进程（通过后台进程名）</h4>



<pre class="wp-block-code"><code># jobs %&lt;background process name&gt;</code></pre>



<p>（注意：只有后台进程名唯一时此操作才有效）</p>



<h4>内容三：管理放入后台的进程<br>3.1 在后台启动放入后台的进程<br>3.1.1 在后台启动放入后台的进程（通过后台进程号）</h4>



<pre class="wp-block-code"><code># bg %&lt;background process number&gt;</code></pre>



<p>（注意：只有可以在后台启动的进程才能在后台启动）</p>



<h4>3.1.2 在后台启动放入后台的进程（通过后台进程名）</h4>



<pre class="wp-block-code"><code># bg %&lt;background process name&gt;</code></pre>



<p>（注意：只有可以在后台启动的进程才能在后台启动，且只有后台进程名唯一时此操作才有效）</p>



<h4>3.2 在前台启动放入后台的进程<br>3.2.1 在前台启动放入后台的进程（通过后台进程号）</h4>



<pre class="wp-block-code"><code># fg %&lt;background process number&gt;</code></pre>



<h4>3.2.2 在前台启动放入后台的进程（通过后台进程名）</h4>



<pre class="wp-block-code"><code># fg %&lt;background process name&gt;</code></pre>



<p>（注意：只有后台进程名唯一时此操作才有效）</p>



<h4>3.3 杀死放入后台的进程<br>3.3.1 杀死放入后台的进程（通过后台进程号）</h4>



<pre class="wp-block-code"><code># kill %&lt;background process number&gt;</code></pre>



<p>（补充：这里可以配合各种 kill 选项进行操作，例如 kill -9）</p>



<h4>3.3.2 杀死放入后台的进程（通过后台进程名）</h4>



<pre class="wp-block-code"><code># kill %&lt;background process name&gt;</code></pre>



<p>（注意：只有后台进程名唯一时此操作才有效）</p>



<p>（补充：这里可以配合各种 kill 选项进行操作，例如 kill -9）</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[步骤] Linux core dump 的开启 （临时）</title>
		<link>https://eternalcenter-2021-12.github.io/log-core/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Mon, 04 May 2020 05:51:05 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System General Log (系统普通日志)]]></category>
		<category><![CDATA[System Log (系统日志)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Setting (系统设置)]]></category>
		<category><![CDATA[System Software (系统软件)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2021-12.github.io/?p=8923</guid>

					<description><![CDATA[步骤一：理解 core dump 的作用 开启 core dump 之后，如果出现了 C 语言程序的 crash，则会将 crash 的结果记录到一个文件里 步骤二：临时开启 core dump2.1 设置可生成 core dump 大小的参数2.1.1 查看当前允许生成 core dump 的大小 2.1.2 将允许生成 core dump 大小的参数设置为无限大 2.1.3 确认修改结果 2.2 设置 core dump 生成的位置 步骤三：此时如果有 C 语言的程序 crash 了，则会被自动记录]]></description>
										<content:encoded><![CDATA[
<h4>步骤一：理解 core dump 的作用</h4>



<p>开启 core dump 之后，如果出现了 C 语言程序的 crash，则会将 crash 的结果记录到一个文件里</p>



<h4>步骤二：临时开启 core dump<br>2.1 设置可生成 core dump 大小的参数<br>2.1.1 查看当前允许生成 core dump 的大小</h4>



<pre class="wp-block-code"><code># ulimit -a
core file size          (blocks, -c) 0
data seg size           (kbytes, -d) unlimited
scheduling priority             (-e) 0
file size               (blocks, -f) unlimited
pending signals                 (-i) 31722
max locked memory       (kbytes, -l) 64
max memory size         (kbytes, -m) unlimited
open files                      (-n) 1024
pipe size            (512 bytes, -p) 8
POSIX message queues     (bytes, -q) 819200
real-time priority              (-r) 0
stack size              (kbytes, -s) 8192
cpu time               (seconds, -t) unlimited
max user processes              (-u) 31722
virtual memory          (kbytes, -v) unlimited
file locks                      (-x) unlimited</code></pre>



<h4>2.1.2 将允许生成 core dump 大小的参数设置为无限大</h4>



<pre class="wp-block-code"><code># ulimit -c unlimited</code></pre>



<h4>2.1.3 确认修改结果</h4>



<pre class="wp-block-code"><code># ulimit -a
core file size          (blocks, -c) unlimited
data seg size           (kbytes, -d) unlimited
scheduling priority             (-e) 0
file size               (blocks, -f) unlimited
pending signals                 (-i) 31722
max locked memory       (kbytes, -l) 64
max memory size         (kbytes, -m) unlimited
open files                      (-n) 1024
pipe size            (512 bytes, -p) 8
POSIX message queues     (bytes, -q) 819200
real-time priority              (-r) 0
stack size              (kbytes, -s) 8192
cpu time               (seconds, -t) unlimited
max user processes              (-u) 31722
virtual memory          (kbytes, -v) unlimited
file locks                      (-x) unlimited</code></pre>



<h4>2.2 设置 core dump 生成的位置</h4>



<pre class="wp-block-code"><code># sysctl -w kernel.core_pattern=/tmp/corefile/core-%e-%p</code></pre>



<h4>步骤三：此时如果有 C 语言的程序 crash 了，则会被自动记录</h4>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[步骤] openSUSE&#038;SUSE 图形系统桌面的安装</title>
		<link>https://eternalcenter-2021-12.github.io/graphic-opensuse/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Thu, 09 Apr 2020 11:58:45 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Setting (系统设置)]]></category>
		<category><![CDATA[System Software (系统软件)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2021-12.github.io/?p=8695</guid>

					<description><![CDATA[步骤目录： 步骤一：查看 openSUSE&#38;SUSE 可安装的软件包组 步骤二：安装 Gnome 图形系统界面2.1 安装 Gnome 图形系统界面2.2 将系统默认的图形桌面设置为 Gnome 图形桌面 步骤三：进入图形系统界面3.1 设置系统开机进入图形桌面3.2 立刻进入图形桌面 具体的操作步骤： 步骤一：查看 openSUSE&#38;SUSE 可安装的软件包组 步骤二：安装 Gnome 图形系统桌面2.1 安装 Gnome 图形系统桌面 2.2 将系统默认的图形桌面设置为 Gnome 图形系统桌面 将以下内容： 修改为： 步骤三：进入图形系统桌面3.1 设置系统开机进入图形系统桌面 3.2 立刻进入图形系统桌面 或者：]]></description>
										<content:encoded><![CDATA[
<h2>步骤目录：</h2>



<h4>步骤一：查看 openSUSE&amp;SUSE 可安装的软件包组</h4>



<h4>步骤二：安装 Gnome 图形系统界面<br>2.1 安装 Gnome 图形系统界面<br>2.2 将系统默认的图形桌面设置为 Gnome 图形桌面</h4>



<h4>步骤三：进入图形系统界面<br>3.1 设置系统开机进入图形桌面<br>3.2 立刻进入图形桌面</h4>



<h2>具体的操作步骤：</h2>



<h4>步骤一：查看 openSUSE&amp;SUSE 可安装的软件包组</h4>



<pre class="wp-block-code"><code># zypper se -t pattern</code></pre>



<h4>步骤二：安装 Gnome 图形系统桌面<br>2.1 安装 Gnome 图形系统桌面</h4>



<pre class="wp-block-code"><code># zypper -n in -t pattern gnome</code></pre>



<h4>2.2 将系统默认的图形桌面设置为 Gnome 图形系统桌面</h4>



<pre class="wp-block-code"><code># vim /etc/sysconfig/displaymanager</code></pre>



<p>将以下内容：</p>



<pre class="wp-block-code"><code>......
DISPLAYMANAGER_XSERVER="Xorg"</code></pre>



<p>修改为：</p>



<pre class="wp-block-code"><code>......
DISPLAYMANAGER_XSERVER="gdm"</code></pre>



<h4>步骤三：进入图形系统桌面<br>3.1 设置系统开机进入图形系统桌面</h4>



<pre class="wp-block-code"><code># systemctl set-default graphical.target</code></pre>



<h4>3.2 立刻进入图形系统桌面</h4>



<pre class="wp-block-code"><code># startx</code></pre>



<p>或者：</p>



<pre class="wp-block-code"><code># init 5</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[命令] Linux 命令 systemctl （程序单元启动和管理）</title>
		<link>https://eternalcenter-2021-12.github.io/systemctl/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Fri, 13 Mar 2020 06:59:07 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Operation (系统操作)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Process (系统进程)]]></category>
		<category><![CDATA[System Process & System Performance (系统进程 & 系统性能)]]></category>
		<category><![CDATA[System Software (系统软件)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2021-12.github.io/?p=8658</guid>

					<description><![CDATA[内容目录： 内容一：受 systemctl 管理的单元列表1.1 列出所有 systemctl 可用单元1.2 列出所有 systemctl 正在运行的单元1.3 列出所有 systemctl 运行失败的单元1.4 列出所有受 systemctl 管理的服务单元1.5 列出所有受 systemctl 管理的目标单元 内容二：单元的状态查看 内容三：单元的启动管理3.1 启动某一个单元3.2 停止某一个单元3.3 重启某一个单元3.4 启动并将一个单元设置为开机自启 内容四：单元的开机自启管理4.1 让某一个单元开机自启4.2 取消某一个单元的开机自启4.3 查看某一个单元是否是开机自启 内容五：单元的锁定管理5.1 锁定某一个单元（禁止其启动）5.2 取消某一个单元的锁定（让它可以启动） 内容六：重新加载某 systemctl 的配置文件 具体的内容： 内容一：受 systemctl 管理的单元列表1.1 列出所有 systemctl 可用单元 （补充：所有受 systemctl 管理单元的文件都是放在 /usr/lib/systemd/system 目录下的） 1.2 列出所有 systemctl 正在运行的单元 （补充：所有受 systemctl 管理单元的文件都是放在 /usr/lib/systemd/system &#8230; <p class="link-more"><a href="https://eternalcenter-2021-12.github.io/systemctl/" class="more-link">Continue reading<span class="screen-reader-text"> "[命令] Linux 命令 systemctl （程序单元启动和管理）"</span></a></p>]]></description>
										<content:encoded><![CDATA[
<h2>内容目录：</h2>



<h4>内容一：受 systemctl 管理的单元列表<br>1.1 列出所有 systemctl 可用单元<br>1.2 列出所有 systemctl 正在运行的单元<br>1.3 列出所有 systemctl 运行失败的单元<br>1.4 列出所有受 systemctl 管理的服务单元<br>1.5 列出所有受 systemctl 管理的目标单元</h4>



<h4>内容二：单元的状态查看</h4>



<h4>内容三：单元的启动管理<br>3.1 启动某一个单元<br>3.2 停止某一个单元<br>3.3 重启某一个单元<br>3.4 启动并将一个单元设置为开机自启</h4>



<h4>内容四：单元的开机自启管理<br>4.1 让某一个单元开机自启<br>4.2 取消某一个单元的开机自启<br>4.3 查看某一个单元是否是开机自启</h4>



<h4>内容五：单元的锁定管理<br>5.1 锁定某一个单元（禁止其启动）<br>5.2 取消某一个单元的锁定（让它可以启动）</h4>



<h4>内容六：重新加载某 systemctl 的配置文件</h4>



<h2>具体的内容：</h2>



<h4>内容一：受 systemctl 管理的单元列表<br>1.1 列出所有 systemctl 可用单元</h4>



<pre class="wp-block-code"><code># systemctl list-unit-files</code></pre>



<p>（补充：所有受 systemctl 管理单元的文件都是放在 /usr/lib/systemd/system 目录下的）</p>



<h4>1.2 列出所有 systemctl 正在运行的单元</h4>



<pre class="wp-block-code"><code># systemctl list-units</code></pre>



<p>（补充：所有受 systemctl 管理单元的文件都是放在 /usr/lib/systemd/system 目录下的）</p>



<h4>1.3 列出所有 systemctl 运行失败的单元</h4>



<pre class="wp-block-code"><code># systemctl --failed</code></pre>



<p>（补充：所有受 systemctl 管理单元的文件都是放在 /usr/lib/systemd/system 目录下的）</p>



<h4>1.4 列出所有受 systemctl 管理的服务单元</h4>



<pre class="wp-block-code"><code># systemctl list-units --type service</code></pre>



<p>（<br>补充：<br>1) 所有受 systemctl 管理单元的文件都是放在 /usr/lib/systemd/system 目录下的<br>2) service 是一个个单独的服务<br>3) target 是包含很多个单独服务（service）的一组服务<br>）</p>



<h4>1.5 列出所有受 systemctl 管理的目标单元</h4>



<pre class="wp-block-code"><code># systemctl list-units --type target</code></pre>



<p>（<br>补充：<br>1) 所有受 systemctl 目标管理单元的文件都是放在 /usr/lib/systemd/system 目录下的<br>2) service 是一个个单独的服务<br>3) target 是包含很多个单独服务（service）的一组服务<br>）</p>



<h4>内容二：单元的状态查看</h4>



<pre class="wp-block-code"><code># systemctl status &lt;unit&gt;</code></pre>



<p>（<br>补充：<br>1) systemctl 的主要状态项有：<br>     Loaded 单元是否已被内存加载<br>     Active 单元是否已成功运行<br>     Main PID 单元主进程的 PID 号<br>     Status 单元的其他相关信息</p>



<p>2) Active 状态项的参数有：<br>     loaded 单元文件已经处理<br>     active（running） 单元正在运行<br>     active（exited）已完成单元的一次性配置<br>     active（waiting）正在等待启动<br>     inactive 没有启动<br>     enabled 将在系统启动时自动启动<br>     disabled 不会在系统启动时自动启动<br>     static 可以被其他单元启动</p>



<p>3) 单元既可以是服务单元也可以是目标单元<br>）</p>



<h4>内容三：单元的启动管理<br>3.1 启动某一个单元</h4>



<pre class="wp-block-code"><code># systemctl start &lt;unit&gt;</code></pre>



<p>（<br>补充：<br>1) service 是一个个单独的服务<br>2) target 是包含很多个单独服务（service）的一组服务<br>3) 单元既可以是服务单元（service）也可以是目标单元（target）<br>）</p>



<h4>3.2 停止某一个单元</h4>



<pre class="wp-block-code"><code># systemctl stop &lt;unit&gt;</code></pre>



<p>（<br>补充：<br>1) service 是一个个单独的服务<br>2) target 是包含很多个单独服务（service）的一组服务<br>3) 单元既可以是服务单元（service）也可以是目标单元（target）<br>）</p>



<h4>3.3 重启某一个单元</h4>



<pre class="wp-block-code"><code># systemctl restart &lt;unit&gt;</code></pre>



<p>（<br>补充：<br>1) service 是一个个单独的服务<br>2) target 是包含很多个单独服务（service）的一组服务<br>3) 单元既可以是服务单元（service）也可以是目标单元（target）<br>）</p>



<h4>3.3 查看某一个单元是否正在运行</h4>



<pre class="wp-block-code"><code># systemctl is-active &lt;unit&gt;</code></pre>



<p>（<br>补充：<br>1) service 是一个个单独的服务<br>2) target 是包含很多个单独服务（service）的一组服务<br>3) 单元既可以是服务单元（service）也可以是目标单元（target）<br>）</p>



<h4>3.4 启动并将一个单元设置为开机自启</h4>



<pre class="wp-block-code"><code># systemctl enable --now &lt;unit&gt;</code></pre>



<p>（<br>补充：<br>1) service 是一个个单独的服务<br>2) target 是包含很多个单独服务（service）的一组服务<br>3) 单元既可以是服务单元（service）也可以是目标单元（target）<br>）</p>



<h4>内容四：单元的开机自启管理<br>4.1 让某一个单元开机自启</h4>



<pre class="wp-block-code"><code># systemctl enable &lt;unit&gt;</code></pre>



<p>（<br>补充：<br>1) service 是一个个单独的服务<br>2) target 是包含很多个单独服务（service）的一组服务<br>3) 单元既可以是服务单元（service）也可以是目标单元（target）<br>）</p>



<h4>4.2 取消某一个单元的开机自启</h4>



<pre class="wp-block-code"><code># systemctl disable &lt;unit&gt;</code></pre>



<p>（<br>补充：<br>1) service 是一个个单独的服务<br>2) target 是包含很多个单独服务（service）的一组服务<br>3) 单元既可以是服务单元（service）也可以是目标单元（target）<br>）</p>



<h4>4.3 查看某一个单元是否是开机自启</h4>



<pre class="wp-block-code"><code># systemctl is-enabled &lt;unit&gt;</code></pre>



<p>（<br>补充：<br>1) service 是一个个单独的服务<br>2) target 是包含很多个单独服务（service）的一组服务<br>3) 单元既可以是服务单元（service）也可以是目标单元（target）<br>）</p>



<h4>内容五：单元的锁定管理<br>5.1 锁定某一个单元（禁止其启动）</h4>



<pre class="wp-block-code"><code># systemctl mask &lt;unit&gt;</code></pre>



<p>（<br>补充：<br>1) service 是一个个单独的服务<br>2) target 是包含很多个单独服务（service）的一组服务<br>3) 单元既可以是服务单元（service）也可以是目标单元（target）<br>）</p>



<h4>5.2 取消某一个单元的锁定（让它可以启动）</h4>



<pre class="wp-block-code"><code># systemctl umask &lt;unit&gt;</code></pre>



<p>（<br>补充：<br>1) service 是一个个单独的服务<br>2) target 是包含很多个单独服务（service）的一组服务<br>3) 单元既可以是服务单元（service）也可以是目标单元（target）<br>）</p>



<h4>内容六：重新加载某 systemctl 的配置文件</h4>



<pre class="wp-block-code"><code># systemctl daemon-reload</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[内容] CentOS&#038;RHEL yum 的使用 （设置代理）</title>
		<link>https://eternalcenter-2021-12.github.io/yum-proxy/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Sat, 21 Dec 2019 15:58:22 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Network (系统网络)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Software (系统软件)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2021-12.github.io/?p=7979</guid>

					<description><![CDATA[内容一：设置所有 yum 源网络代理的方法 添加以下内容： （注意：1) 如果没有用户和密码就写成 proxy=http://&/#60;IP address>:&#60;port>/2) 如果密码中也有一个 “@” 符号，则需要把 “@” 符号转义一下，转义成 %40） 或者： 添加以下内容： （注意：如果没有用户和密码就不写后面两行） 内容二：单独设置某个 yum 源网络代理的方法 添加以下内容： （注意：1) 如果没有用户和密码就写成 proxy=http://&/#60;IP address>:&#60;port>/2) 如果密码中也有一个 “@” 符号，则需要把 “@” 符号转义一下，转义成 %40） 或者： 添加以下内容： （注意：如果没有用户和密码就不写后面两行）]]></description>
										<content:encoded><![CDATA[
<h4>内容一：设置所有 yum 源网络代理的方法</h4>



<pre class="wp-block-code"><code># vim /etc/yum.conf</code></pre>



<p>添加以下内容：</p>



<pre class="wp-block-code"><code>......
proxy=http://&lt;user&gt;:&lt;password&gt;@&lt;IP/ address&gt;:&lt;port&gt;/</code></pre>



<p>（<br>注意：<br>1) 如果没有用户和密码就写成 proxy=http://&lt;IP/ address>:&lt;port>/<br>2) 如果密码中也有一个 “@” 符号，则需要把 “@” 符号转义一下，转义成 %40<br>）</p>



<p>或者：</p>



<pre class="wp-block-code"><code># vim /etc/yum.conf</code></pre>



<p>添加以下内容：</p>



<pre class="wp-block-code"><code>......
proxy=http:&lt;IP address&gt;:&lt;port&gt;
proxy_username=&lt;user&gt;
proxy_password=&lt;password&gt;</code></pre>



<p>（注意：如果没有用户和密码就不写后面两行）</p>



<h4>内容二：单独设置某个 yum 源网络代理的方法</h4>



<pre class="wp-block-code"><code># vim /etc/yum.repos.d/&lt;yum source file name prefix&gt;.repo</code></pre>



<p>添加以下内容：</p>



<pre class="wp-block-code"><code>......
proxy=http://&lt;user&gt;:&lt;password&gt;@&lt;IP/ address&gt;:&lt;port&gt;/
......</code></pre>



<p>（<br>注意：<br>1) 如果没有用户和密码就写成 proxy=http://&lt;IP/ address>:&lt;port>/<br>2) 如果密码中也有一个 “@” 符号，则需要把 “@” 符号转义一下，转义成 %40<br>）</p>



<p>或者：</p>



<pre class="wp-block-code"><code># vim /etc/yum.repos.d/&lt;yum source file name prefix&gt;.repo</code></pre>



<p>添加以下内容：</p>



<pre class="wp-block-code"><code>......
proxy=http://&lt;IP/ address&gt;:&lt;port&gt;
proxy_username=&lt;user&gt;
proxy_password=&lt;password&gt;</code></pre>



<p>（注意：如果没有用户和密码就不写后面两行）</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
